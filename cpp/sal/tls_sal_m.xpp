// 
// Cryptographic Security Abstraction Layer API - this version uses only MIRACL core functions
//

#include "tls_sal.h"

// Pull in MIRACL core code

#include "core.h"
#include "ecdh_NIST256.h"  
#include "ecdh_NIST384.h"
#include "ecdh_C25519.h"
#include "rsa_RSA2048.h"
#include "rsa_RSA4096.h"
#if CRYPTO_SETTING>=POST_QUANTUM
#include "dilithium.h"
#include "kyber.h"
#endif

using namespace core;

csprng RNG;    // Global miracl core Crypto Strong RNG - could be a hardware source

char* SAL_name()
{
    return (char *)"MIRACL Core"; 
}

bool SAL_initLib()
{ // Initialise library
    char raw[64];
    for (int i = 0; i < 64; i++) raw[i] = i;  // *** should be from output of true random number generator ****
    RAND_seed(&RNG, 64, raw);    
    return true;
}

void SAL_endLib()
{
}

int SAL_ciphers(int *ciphers)
{
    int n=2;
    ciphers[0]=TLS_AES_128_GCM_SHA256;
    ciphers[1]=TLS_AES_256_GCM_SHA384;
    return n;
}

// IMPORTANT - Favourite group (as used in client Hello) must be placed first in list
int SAL_groups(int *groups)
{
    int n=0;

#if CRYPTO_SETTING==TINY_ECC
    n=3;
    groups[0]=X25519;
    groups[1]=SECP256R1;
    groups[2]=SECP384R1;
#endif
#if CRYPTO_SETTING==TYPICAL
    n=3;
    groups[0]=X25519;
    groups[1]=SECP256R1;
    groups[2]=SECP384R1;
#endif
#if CRYPTO_SETTING==POST_QUANTUM
    n=4;
    groups[0]=KYBER768;
    groups[1]=X25519;
    groups[2]=SECP256R1;
    groups[3]=SECP384R1;
#endif
#if CRYPTO_SETTING==HYBRID
    n=5;
    groups[0]=HYBRID_KX;
    groups[1]=KYBER768;
    groups[2]=X25519;
    groups[3]=SECP256R1;
    groups[4]=SECP384R1;
#endif
    return n;
}

int SAL_sigs(int *sigAlgs)
{
    int n=2;
    sigAlgs[0]=ECDSA_SECP256R1_SHA256;
    sigAlgs[1]=ECDSA_SECP384R1_SHA384;
#if CRYPTO_SETTING>TINY_ECC
    sigAlgs[n]=RSA_PSS_RSAE_SHA256; n++;
#endif
#if CRYPTO_SETTING>=POST_QUANTUM
    sigAlgs[n]=DILITHIUM3; n++;
#endif
#if CRYPTO_SETTING==HYBRID
    sigAlgs[n]=DILITHIUM2; n++;
    sigAlgs[n]=DILITHIUM2_P256; n++;
#endif
    return n;
}

int SAL_sigCerts(int *sigAlgsCert)
{
    int n=2;
    sigAlgsCert[0]=ECDSA_SECP256R1_SHA256;
    sigAlgsCert[1]=ECDSA_SECP384R1_SHA384;
#if CRYPTO_SETTING>TINY_ECC
    sigAlgsCert[n]=RSA_PKCS1_SHA256; n++;
    sigAlgsCert[n]=RSA_PKCS1_SHA384; n++;
    sigAlgsCert[n]=RSA_PKCS1_SHA512; n++;
#endif
#if CRYPTO_SETTING>=POST_QUANTUM
    sigAlgsCert[n]=DILITHIUM3; n++;
#endif
#if CRYPTO_SETTING==HYBRID
    sigAlgsCert[n]=DILITHIUM2; n++;
    sigAlgsCert[n]=DILITHIUM2_P256; n++;
#endif
    return n;
}

// return hashtype from cipher_suite
int SAL_hashType(int cipher_suite)
{
    int htype=0;  
    if (cipher_suite==TLS_AES_128_GCM_SHA256) htype=TLS_SHA256_T;
    if (cipher_suite==TLS_AES_256_GCM_SHA384) htype=TLS_SHA384_T;
    if (cipher_suite==TLS_CHACHA20_POLY1305_SHA256) htype=TLS_SHA256_T;
    return htype;
}

/*
// return hashtype from signature algorithm
int SAL_hashTypeSig(int sigAlg)
{
    int htype=0;  
    if (sigAlg==ECDSA_SECP256R1_SHA256) htype=TLS_SHA256_T;
    if (sigAlg==ECDSA_SECP384R1_SHA384) htype=TLS_SHA384_T;
    if (sigAlg==RSA_PSS_RSAE_SHA256) htype=TLS_SHA256_T;
    if (sigAlg==RSA_PSS_RSAE_SHA384) htype=TLS_SHA384_T;
    if (sigAlg==RSA_PSS_RSAE_SHA512) htype=TLS_SHA512_T;
    if (sigAlg==RSA_PKCS1_SHA256) htype=TLS_SHA256_T;
    if (sigAlg==RSA_PKCS1_SHA384) htype=TLS_SHA384_T;
    if (sigAlg==RSA_PKCS1_SHA512) htype=TLS_SHA512_T;
    return htype;
}
*/ 
// return hash length from hash type
int SAL_hashLen(int hash_type)
{
    int hlen=0;
    if (hash_type==TLS_SHA256_T) hlen=32;
    if (hash_type==TLS_SHA384_T) hlen=48;
    if (hash_type==TLS_SHA512_T) hlen=64;
    return hlen;
}

int SAL_aeadKeylen(int cipher_suite)
{
    int klen=0;
    if (cipher_suite==TLS_AES_128_GCM_SHA256) klen=16;
    if (cipher_suite==TLS_AES_256_GCM_SHA384) klen=32;
    if (cipher_suite==TLS_CHACHA20_POLY1305_SHA256) klen=32;
    return klen;
}

int SAL_aeadTaglen(int cipher_suite)
{
    int tlen=0;
    if (cipher_suite==TLS_AES_128_GCM_SHA256) tlen=16;
    if (cipher_suite==TLS_AES_256_GCM_SHA384) tlen=16;
    if (cipher_suite==TLS_CHACHA20_POLY1305_SHA256) tlen=16;
    return tlen;
}

// convert TLS octad to MIRACL core octet
static octet octad_to_octet(octad *x)
{
    octet y;
    if (x!=NULL) {
        y.len=x->len;
        y.max=x->max;
        y.val=x->val;
    } else {
        y.len=y.max=0;
        y.val=NULL;
    }
    return y;
}

// Return a random byte
int SAL_randomByte()
{
    return RAND_byte(&RNG);
}

// Fill an octad with random values
void SAL_randomOctad(int len,octad *R)
{
    for (int i=0;i<len;i++)
        R->val[i]=SAL_randomByte();
    R->len=len;
}

// HKDF - Extract secret from raw input
void SAL_hkdfExtract(int htype,octad *PRK,octad *SALT,octad *IKM)
{
    int hlen=SAL_hashLen(htype);
    octet MC_PRK=octad_to_octet(PRK);   // Make it MIRACL core compatible
    octet MC_SALT=octad_to_octet(SALT);
    octet MC_IKM=octad_to_octet(IKM);

    HKDF_Extract(MC_SHA2,hlen,&MC_PRK,&MC_SALT,&MC_IKM);

    IKM->len=MC_IKM.len;              // restore length
    SALT->len=MC_SALT.len;
    PRK->len=MC_PRK.len;
}

void SAL_hkdfExpand(int htype, int olen, octad *OKM,octad *PRK, octad *INFO)
{
    int hlen=SAL_hashLen(htype);
    octet MC_OKM=octad_to_octet(OKM); 
    octet MC_INFO=octad_to_octet(INFO);
    octet MC_PRK=octad_to_octet(PRK);

    HKDF_Expand(MC_SHA2,hlen,&MC_OKM,olen,&MC_PRK,&MC_INFO);

    OKM->len=MC_OKM.len;
    INFO->len=MC_INFO.len;
    PRK->len=MC_PRK.len;
}

// HMAC
void SAL_hmac(int htype,octad *T,octad *K,octad *M)
{
    int hlen=SAL_hashLen(htype);
    octet MC_T=octad_to_octet(T);
    octet MC_K=octad_to_octet(K);
    octet MC_M=octad_to_octet(M);

    HMAC(MC_SHA2,hlen,&MC_T,hlen,&MC_K,&MC_M);

    T->len=MC_T.len;
    K->len=MC_K.len;
    M->len=MC_M.len;
}

// HASH of NULL
void SAL_hashNull(int htype,octad *H)
{
    if (htype==TLS_SHA256_T)
    {
        core::hash256 sh;
        HASH256_init(&sh);
        HASH256_hash(&sh,H->val);
    } 
    if (htype==TLS_SHA384_T)
    {
        core::hash384 sh;
        HASH384_init(&sh);
        HASH384_hash(&sh,H->val);
    }     
    if (htype==TLS_SHA512_T)
    {
        core::hash512 sh;
        HASH512_init(&sh);
        HASH512_hash(&sh,H->val);

    }     
    H->len=SAL_hashLen(htype);
    return;    
}

// Unified hashing. Hash type type indicate by htype.
void SAL_hashInit(int htype,unihash *h)
{
    if (htype==TLS_SHA256_T) 
        HASH256_init((core::hash256*)&(h->state));
    if (htype==TLS_SHA384_T)
        HASH384_init((core::hash512*)&(h->state));
    if (htype==TLS_SHA512_T)
        HASH512_init((core::hash512*)&(h->state));
    h->htype=htype;
}

// Process a byte array
void SAL_hashProcessArray(unihash *h,char *b,int len)
{
    int i;
    if (h->htype==TLS_SHA256_T)
    {
        for (i=0;i<len;i++)
            HASH256_process((core::hash256*)&(h->state),b[i]);   
    }   
    if (h->htype==TLS_SHA384_T)
    {
        for (i=0;i<len;i++)
            HASH384_process((core::hash512*)&(h->state),b[i]);   
    }  
    if (h->htype==TLS_SHA512_T)
    {
        for (i=0;i<len;i++)
            HASH512_process((core::hash512*)&(h->state),b[i]);   
    }     
}

// output digest
int SAL_hashOutput(unihash *h,char *d)
{
    int hlen=SAL_hashLen(h->htype);
    if (h->htype==TLS_SHA256_T)
        HASH256_continuing_hash((core::hash256*)&(h->state),d);
    if (h->htype==TLS_SHA384_T)
        HASH384_continuing_hash((core::hash384*)&(h->state),d);
    if (h->htype==TLS_SHA512_T)
        HASH512_continuing_hash((core::hash512*)&(h->state),d);
    return hlen;
}

void SAL_aeadEncrypt(crypto *send,int hdrlen,char *hdr,int ptlen,char *pt,octad *TAG)
{ // AEAD encryption
  // its AES-GCM
    gcm g;
    GCM_init(&g,send->K.len,send->K.val,12,send->IV.val);  // Encrypt with Key and IV
    GCM_add_header(&g,hdr,hdrlen);
    GCM_add_plain(&g,pt,pt,ptlen);
//create and append TA
    GCM_finish(&g,TAG->val); 
    TAG->len=16;
}

bool SAL_aeadDecrypt(crypto *recv,int hdrlen,char *hdr,int ctlen,char *ct,octad *TAG)
{ // AEAD decryption
  // its AES-GCM
    char ctag[TLS_MAX_TAG_SIZE];   // calculated TAG
    octad CTAG={0,sizeof(ctag),ctag};
    gcm g;
    GCM_init(&g,recv->K.len,recv->K.val,12,recv->IV.val);  // Decrypt with Key and IV
    GCM_add_header(&g,hdr,hdrlen);
    GCM_add_cipher(&g,ct,ct,ctlen);
//create and append TA
    GCM_finish(&g,CTAG.val); CTAG.len=16;
    if (!OCT_compare(TAG,&CTAG))
        return false;
    return true;
}

// generate a public/private key pair in an approved group for a key exchange
void SAL_generateKeyPair(int group,octad *SK,octad *PK)
{
    octet MC_SK=octad_to_octet(SK);
    octet MC_PK=octad_to_octet(PK);

    if (group==X25519)
    { // Note that this program maintains the private key in big-endian format
      // But X25519 assumes private and public keys are all in little-endian form (and are transmitted/received in that form)
        SAL_randomOctad(32,SK);
        SK->val[31]&=248;  
        SK->val[0]&=127;
        SK->val[0]|=64;
        C25519::ECP_KEY_PAIR_GENERATE(NULL, &MC_SK, &MC_PK);
        OCT_reverse(&MC_PK);  // public key must be transmitted in little-endian form
    }
    if (group==SECP256R1)
    {
        SAL_randomOctad(32,SK);
        NIST256::ECP_KEY_PAIR_GENERATE(NULL, &MC_SK, &MC_PK);
    }
    if (group==SECP384R1)
    {
        SAL_randomOctad(48,SK);
        NIST384::ECP_KEY_PAIR_GENERATE(NULL, &MC_SK, &MC_PK);
    }
#if CRYPTO_SETTING>=POST_QUANTUM
    if (group==KYBER768)
    {
        byte r64[64];
        for (int i=0;i<64;i++)
            r64[i]=SAL_randomByte();
        KYBER768_keypair(r64,&MC_SK,&MC_PK);
    }
    if (group==HYBRID_KX)
    {
        byte r64[64];
        for (int i=0;i<64;i++)
            r64[i]=SAL_randomByte();
        KYBER768_keypair(r64,&MC_SK,&MC_PK);

        char mysk[32],mypk[32];
        octet MYSK={0,sizeof(mysk),mysk};
        octet MYPK={0,sizeof(mypk),mypk};

        for (int i=0;i<32;i++)
            MYSK.val[i]=SAL_randomByte();
        MYSK.len=32;

        MYSK.val[31]&=248;  
        MYSK.val[0]&=127;
        MYSK.val[0]|=64;

        C25519::ECP_KEY_PAIR_GENERATE(NULL, &MYSK, &MYPK);
        OCT_reverse(&MYPK);
        OCT_joctet(&MC_SK,&MYSK);
        OCT_joctet(&MC_PK,&MYPK);

    }
#endif
    SK->len=MC_SK.len;
    PK->len=MC_PK.len;
}

// generate shared secret SS from secret key SK and public key PK
void SAL_generateSharedSecret(int group,octad *SK,octad *PK,octad *SS)
{
    octet MC_SK=octad_to_octet(SK);
    octet MC_PK=octad_to_octet(PK);
    octet MC_SS=octad_to_octet(SS);

    if (group==X25519) {
        OCT_reverse(&MC_PK); // to big endian
        C25519::ECP_SVDP_DH(&MC_SK, &MC_PK, &MC_SS,0);
        OCT_reverse(&MC_PK); // back again
        OCT_reverse(&MC_SS);
    }
    if (group==SECP256R1) {
        NIST256::ECP_SVDP_DH(&MC_SK, &MC_PK, &MC_SS,0);
    }
    if (group==SECP384R1) {
        NIST384::ECP_SVDP_DH(&MC_SK, &MC_PK, &MC_SS,0);
    }
#if CRYPTO_SETTING>=POST_QUANTUM
    if (group==KYBER768) {
        KYBER768_decrypt(&MC_SK,&MC_PK,&MC_SS);
    }
    if (group==HYBRID_KX) {
        char mysk[32],mypk[32],myss[32];
        octet MYSK={0,sizeof(mysk),mysk};
        octet MYPK={0,sizeof(mypk),mypk};
        octet MYSS={0,sizeof(myss),myss};
        OCT_chop(&MC_SK,&MYSK,MC_SK.len-32);
        OCT_chop(&MC_PK,&MYPK,MC_PK.len-32);
        KYBER768_decrypt(&MC_SK,&MC_PK,&MC_SS);

        OCT_reverse(&MYPK); // to big endian
        C25519::ECP_SVDP_DH(&MYSK, &MYPK, &MYSS,0);
        OCT_reverse(&MYPK); // back again
        OCT_reverse(&MYSS);

        OCT_joctet(&MC_SS,&MYSS);
        OCT_joctet(&MC_SK,&MYSK);
        OCT_joctet(&MC_PK,&MYPK);
    }
#endif
    SK->len=MC_SK.len;
    PK->len=MC_PK.len;
    SS->len=MC_SS.len;
}

#if CRYPTO_SETTING>=POST_QUANTUM
static bool DILITHIUM3_VERIFY(octad *CERT,octad *SIG,octad *PUBKEY)
{
    octet MC_CERT=octad_to_octet(CERT);
    octet MC_SIG=octad_to_octet(SIG);
    octet MC_PUBKEY=octad_to_octet(PUBKEY);
    return DLTHM_verify_3(&MC_PUBKEY,&MC_CERT,&MC_SIG);    
}

static void DILITHIUM3_SIGN(octad *KEY,octad *MESS,octad *SIG)
{
    octet MC_MESS=octad_to_octet(MESS);
    octet MC_KEY=octad_to_octet(KEY);
    octet MC_SIG=octad_to_octet(SIG);

    DLTHM_signature_3(&MC_KEY,&MC_MESS,&MC_SIG); 
    SIG->len=MC_SIG.len;
}

static bool DILITHIUM2_VERIFY(octad *CERT,octad *SIG,octad *PUBKEY)
{
    octet MC_CERT=octad_to_octet(CERT);
    octet MC_SIG=octad_to_octet(SIG);
    octet MC_PUBKEY=octad_to_octet(PUBKEY);
    return DLTHM_verify_2(&MC_PUBKEY,&MC_CERT,&MC_SIG);    
}

static void DILITHIUM2_SIGN(octad *KEY,octad *MESS,octad *SIG)
{
    octet MC_MESS=octad_to_octet(MESS);
    octet MC_KEY=octad_to_octet(KEY);
    octet MC_SIG=octad_to_octet(SIG);

    DLTHM_signature_2(&MC_KEY,&MC_MESS,&MC_SIG); 
    SIG->len=MC_SIG.len;
}
#endif

// RSA 2048-bit PKCS1.5 signature verification
static bool RSA_2048_PKCS15_VERIFY(int sha,octad *CERT,octad *SIG,octad *PUBKEY)
{
    bool res;
    char p1[RFS_RSA2048];
    octet P1={0,sizeof(p1),p1};
    char p2[RFS_RSA2048];
    octet P2={0,sizeof(p2),p2};

    octet MC_CERT=octad_to_octet(CERT);
    octet MC_SIG=octad_to_octet(SIG);
    octet MC_PUBKEY=octad_to_octet(PUBKEY);

    RSA2048::rsa_public_key PK;
    PK.e = 65537; // assuming this!
    RSA2048::RSA_fromOctet(PK.n, &MC_PUBKEY);
    RSA2048::RSA_ENCRYPT(&PK, &MC_SIG, &P2);
    PKCS15(sha, &MC_CERT, &P1);
    res=OCT_comp(&P1, &P2);
    if (!res)
    { // check alternate PKCS1.5 encoding
        PKCS15b(sha, &MC_CERT, &P1);
        res=OCT_comp(&P1, &P2);
    }
    return res;
}

// RSA 4096-bit PKCS1.5 signature verification
static bool RSA_4096_PKCS15_VERIFY(int sha,octad *CERT,octad *SIG,octad *PUBKEY)
{
    bool res;
    char p1[RFS_RSA4096];
    octet P1={0,sizeof(p1),p1};
    char p2[RFS_RSA4096];
    octet P2={0,sizeof(p2),p2};

    octet MC_CERT=octad_to_octet(CERT);
    octet MC_SIG=octad_to_octet(SIG);
    octet MC_PUBKEY=octad_to_octet(PUBKEY);

    RSA4096::rsa_public_key PK;
    PK.e = 65537; // assuming this!
    RSA4096::RSA_fromOctet(PK.n, &MC_PUBKEY);
    RSA4096::RSA_ENCRYPT(&PK, &MC_SIG, &P2);
    PKCS15(sha, &MC_CERT, &P1);
    res=OCT_comp(&P1, &P2);
    if (!res)
    { // check alternate PKCS1.5 encoding
        PKCS15b(sha, &MC_CERT, &P1);
        res=OCT_comp(&P1, &P2);
    }
    return res;
}

static bool RSA_PKCS15_VERIFY(int sha,octad *CERT,octad *SIG,octad *PUBKEY)
{
    if (PUBKEY->len==RFS_RSA2048)
        return RSA_2048_PKCS15_VERIFY(sha,CERT,SIG,PUBKEY);
    if (PUBKEY->len==RFS_RSA4096)
        return RSA_4096_PKCS15_VERIFY(sha,CERT,SIG,PUBKEY);
    return false;
}

// RSA 2048-bit PSS-RSAE signature verification
static bool RSA_2048_PSS_RSAE_VERIFY(int sha,octad *MESS,octad *SIG,octad *PUBKEY)
{
    char p[RFS_RSA2048];
    octet P={0,sizeof(p),p};

    octet MC_MESS=octad_to_octet(MESS);
    octet MC_SIG=octad_to_octet(SIG);
    octet MC_PUBKEY=octad_to_octet(PUBKEY);

    RSA2048::rsa_public_key PK;
    PK.e = 65537;
    RSA2048::RSA_fromOctet(PK.n, &MC_PUBKEY);
    RSA2048::RSA_ENCRYPT(&PK, &MC_SIG, &P);
    if (PSS_VERIFY(sha,&MC_MESS,&P)) 
        return true;
    return false;
}

// RSA 4096-bit PSS-RSAE signature verification
static bool RSA_4096_PSS_RSAE_VERIFY(int sha,octad *MESS,octad *SIG,octad *PUBKEY)
{
    char p[RFS_RSA4096];
    octet P={0,sizeof(p),p};

    octet MC_MESS=octad_to_octet(MESS);
    octet MC_SIG=octad_to_octet(SIG);
    octet MC_PUBKEY=octad_to_octet(PUBKEY);

    RSA4096::rsa_public_key PK;
    PK.e = 65537;
    RSA4096::RSA_fromOctet(PK.n, &MC_PUBKEY);
    RSA4096::RSA_ENCRYPT(&PK, &MC_SIG, &P);
    if (PSS_VERIFY(sha,&MC_MESS,&P)) 
        return true;
    return false;
}

static bool RSA_PSS_RSAE_VERIFY(int sha,octad *MESS,octad *SIG,octad *PUBKEY)
{
    if (PUBKEY->len==RFS_RSA2048)
        return RSA_2048_PSS_RSAE_VERIFY(sha,MESS,SIG,PUBKEY);
    if (PUBKEY->len==RFS_RSA4096)
        return RSA_4096_PSS_RSAE_VERIFY(sha,MESS,SIG,PUBKEY);
    return false;
}

// Curve SECP256R1 elliptic curve ECDSA verification
static bool SECP256R1_ECDSA_VERIFY(int sha,octad *CERT,octad *SIG,octad *PUBKEY)
{
    int res;

    octet MC_CERT=octad_to_octet(CERT);
    octet MC_SIG=octad_to_octet(SIG);
    octet MC_PUBKEY=octad_to_octet(PUBKEY);

    res=NIST256::ECP_PUBLIC_KEY_VALIDATE(&MC_PUBKEY);
    if (res!=0) return false;

    char r[32];
    octet R={0,sizeof(r),r};
    char s[32];
    octet S={0,sizeof(s),s};
    int siglen=SIG->len/2;
    for (int i=0;i<siglen;i++)
    {
        OCT_jbyte(&R,MC_SIG.val[i],1);
        OCT_jbyte(&S,MC_SIG.val[i+siglen],1);
    }    

    res=NIST256::ECP_VP_DSA(sha, &MC_PUBKEY, &MC_CERT, &R, &S);
    if (res!=0) return false;

    return true;
}

// Curve SECP384R1 elliptic curve ECDSA verification

static bool SECP384R1_ECDSA_VERIFY(int sha,octad *CERT,octad *SIG,octad *PUBKEY)
{
    int res;

    octet MC_CERT=octad_to_octet(CERT);
    octet MC_SIG=octad_to_octet(SIG);
    octet MC_PUBKEY=octad_to_octet(PUBKEY);

    res=NIST384::ECP_PUBLIC_KEY_VALIDATE(&MC_PUBKEY);
    if (res!=0) return false;

    char r[48];
    octet R={0,sizeof(r),r};
    char s[48];
    octet S={0,sizeof(s),s};
    int siglen=SIG->len/2;
    for (int i=0;i<siglen;i++)
    {
        OCT_jbyte(&R,MC_SIG.val[i],1);
        OCT_jbyte(&S,MC_SIG.val[i+siglen],1);
    }    

    res=NIST384::ECP_VP_DSA(sha, &MC_PUBKEY, &MC_CERT, &R, &S);
    if (res!=0) return false;

    return true;
}

static bool Ed25519_VERIFY(octad *CERT,octad *SIG,octad *PUBKEY)
{ // TBD
    return false;
}

// Use Curve SECP256R1 ECDSA to digitally sign a message using a private key 
static void SECP256R1_ECDSA_SIGN(int sha,octad *KEY,octad *MESS,octad *SIG)
{
    octet MC_MESS=octad_to_octet(MESS);
    octet MC_KEY=octad_to_octet(KEY);
    octet MC_SIG=octad_to_octet(SIG);

    char r[32];
    octet R={0,sizeof(r),r};
    char s[32];
    octet S={0,sizeof(s),s};

    NIST256::ECP_SP_DSA(sha, &RNG, NULL, &MC_KEY, &MC_MESS, &R, &S);

    OCT_copy(&MC_SIG,&R);
    OCT_joctet(&MC_SIG,&S);

    SIG->len=MC_SIG.len;
}

// Use Curve SECP384R1 ECDSA to digitally sign a message using a private key 
static void SECP384R1_ECDSA_SIGN(int sha,octad *KEY,octad *MESS,octad *SIG)
{
    octet MC_MESS=octad_to_octet(MESS);
    octet MC_KEY=octad_to_octet(KEY);
    octet MC_SIG=octad_to_octet(SIG);

    char r[48];
    octet R={0,sizeof(r),r};
    char s[48];
    octet S={0,sizeof(s),s};

    NIST384::ECP_SP_DSA(sha, &RNG, NULL, &MC_KEY, &MC_MESS, &R, &S);

    OCT_copy(&MC_SIG,&R);
    OCT_joctet(&MC_SIG,&S);

    SIG->len=MC_SIG.len;
}

static void Ed25519_SIGN(octad *KEY,octad *MESS,octad *SIG)
{ // TBD
}

// Use RSA-2048 PSS-RSAE to digitally sign a message using a private key
static void RSA_2048_PSS_RSAE_SIGN(int sha,octad *KEY,octad *MESS,octad *SIG)
{
    int len=KEY->len/5;   // length of p and q
    if (len!=128) return;
    char p[128];
    octet P={len,sizeof(p),p};
    char q[128];
    octet Q={len,sizeof(q),q};
    char dp[128];
    octet DP={len,sizeof(dp),dp};
    char dq[128];
    octet DQ={len,sizeof(dq),dq};
    char c[128];
    octet C={len,sizeof(c),c}; 
    for (int i=0;i<len;i++)
    {
        p[i]=KEY->val[i];
        q[i]=KEY->val[i+len];
        dp[i]=KEY->val[i+2*len];
        dq[i]=KEY->val[i+3*len];
        c[i]=KEY->val[i+4*len];
    }
    RSA2048::rsa_private_key SK;
    char enc[256];
    octet ENC={0,sizeof(enc),enc};
    RSA2048::RSA_PRIVATE_KEY_FROM_OPENSSL(&P,&Q,&DP,&DQ,&C,&SK);

    octet MC_MESS=octad_to_octet(MESS);
    octet MC_SIG=octad_to_octet(SIG);

    PSS_ENCODE(sha, &MC_MESS, &RNG, &ENC);
    RSA2048::RSA_DECRYPT(&SK,&ENC,&MC_SIG);
    SIG->len=MC_SIG.len;
}

// Use RSA-4096 PSS-RSAE to digitally sign a message using a private key
static void RSA_4096_PSS_RSAE_SIGN(int sha,octad *KEY,octad *MESS,octad *SIG)
{
    int len=KEY->len/5;   // length of p and q
    if (len!=256) return;
    char p[256];
    octet P={len,sizeof(p),p};
    char q[256];
    octet Q={len,sizeof(q),q};
    char dp[256];
    octet DP={len,sizeof(dp),dp};
    char dq[256];
    octet DQ={len,sizeof(dq),dq};
    char c[256];
    octet C={len,sizeof(c),c}; 
    for (int i=0;i<len;i++)
    {
        p[i]=KEY->val[i];
        q[i]=KEY->val[i+len];
        dp[i]=KEY->val[i+2*len];
        dq[i]=KEY->val[i+3*len];
        c[i]=KEY->val[i+4*len];
    }
    RSA4096::rsa_private_key SK;
    char enc[512];
    octet ENC={0,sizeof(enc),enc};

    octet MC_MESS=octad_to_octet(MESS);
    octet MC_SIG=octad_to_octet(SIG);

    RSA4096::RSA_PRIVATE_KEY_FROM_OPENSSL(&P,&Q,&DP,&DQ,&C,&SK);
    PSS_ENCODE(sha, &MC_MESS, &RNG, &ENC);
    RSA4096::RSA_DECRYPT(&SK,&ENC,&MC_SIG);
    SIG->len=MC_SIG.len;
}

static void RSA_PSS_RSAE_SIGN(int sha,octad *KEY,octad *MESS,octad *SIG)
{
    int len=KEY->len/5;
    if (len==128) RSA_2048_PSS_RSAE_SIGN(sha,KEY,MESS,SIG);
    if (len==256) RSA_4096_PSS_RSAE_SIGN(sha,KEY,MESS,SIG);
}

// RFC8446:     "A TLS-compliant application MUST support digital signatures with
//              rsa_pkcs1_sha256 (for certificates), rsa_pss_rsae_sha256 (for
//              CertificateVerify and certificates), and ecdsa_secp256r1_sha256."

// SAL signature verification
bool SAL_tlsSignatureVerify(int sigAlg,octad *BUFF,octad *SIG,octad *PUBKEY)
{
    bool result;
    //int start,elapsed;
    //start = millis();
    switch (sigAlg) {
        case RSA_PKCS1_SHA256 :
            result= RSA_PKCS15_VERIFY(32,BUFF,SIG,PUBKEY);
            break;
        case ECDSA_SECP256R1_SHA256 :
            result= SECP256R1_ECDSA_VERIFY(32,BUFF,SIG,PUBKEY); 
            break;
        case ECDSA_SECP256R1_SHA384 :
            result= SECP256R1_ECDSA_VERIFY(48,BUFF,SIG,PUBKEY); 
            break;
        case RSA_PKCS1_SHA384 :
            result= RSA_PKCS15_VERIFY(48,BUFF,SIG,PUBKEY);
            break;        
        case ECDSA_SECP384R1_SHA384 :
            result= SECP384R1_ECDSA_VERIFY(48,BUFF,SIG,PUBKEY);
            break;
        case RSA_PKCS1_SHA512 :
            result= RSA_PKCS15_VERIFY(64,BUFF,SIG,PUBKEY);
            break;        
        case RSA_PSS_RSAE_SHA256:
            result= RSA_PSS_RSAE_VERIFY(32,BUFF,SIG,PUBKEY);
            break;
        case ED25519:
            result= Ed25519_VERIFY(BUFF,SIG,PUBKEY);
            break;
#if CRYPTO_SETTING>=POST_QUANTUM
        case DILITHIUM3:
            result= DILITHIUM3_VERIFY(BUFF,SIG,PUBKEY);
            break;
        case DILITHIUM2:
            result= DILITHIUM2_VERIFY(BUFF,SIG,PUBKEY);
            break;
#endif
        default:
            result=false;
    }
//    elapsed=(millis()-start);
//    Serial.print("        Verification= "); Serial.println(elapsed);
    return result;
}

// Form Transcript Signature 
void SAL_tlsSignature(int sigAlg,octad *KEY,octad *TRANS,octad *SIG)
{ // probably need to support more cases
    //int start,elapsed;
    //start = millis();
    switch (sigAlg)
    {
    case RSA_PSS_RSAE_SHA256:
        RSA_PSS_RSAE_SIGN(32,KEY,TRANS,SIG);
        break;
    case ED25519:
        Ed25519_SIGN(KEY,TRANS,SIG);
        break;
    case ECDSA_SECP256R1_SHA256:
        SECP256R1_ECDSA_SIGN(32,KEY,TRANS,SIG);
        break;
    case ECDSA_SECP256R1_SHA384:
        SECP256R1_ECDSA_SIGN(48,KEY,TRANS,SIG);
        break;
    case ECDSA_SECP384R1_SHA384:
        SECP384R1_ECDSA_SIGN(48,KEY,TRANS,SIG);
        break;
#if CRYPTO_SETTING>=POST_QUANTUM
    case DILITHIUM3:
        DILITHIUM3_SIGN(KEY,TRANS,SIG);
        break;
    case DILITHIUM2:
        DILITHIUM2_SIGN(KEY,TRANS,SIG);
#endif
    }
//    elapsed=(millis()-start);
//    Serial.print("        Signature= "); Serial.println(elapsed);
}


.TH "C:/Users/mscot/TLS1.3/cpp/include/tls_client_send.h" 3 "Mon Oct 3 2022" "Version 1.2" "TiigerTLS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Users/mscot/TLS1.3/cpp/include/tls_client_send.h \- Process Output to be sent to the Server\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'tls_sal\&.h'\fP
.br
\fC#include 'tls1_3\&.h'\fP
.br
\fC#include 'tls_sockets\&.h'\fP
.br
\fC#include 'tls_keys_calc\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBsendCCCS\fP (\fBTLS_session\fP *session)"
.br
.RI "Send Change Cipher Suite message\&. "
.ti -1c
.RI "int \fBaddPreSharedKeyExt\fP (\fBoctad\fP *EXT, \fBunsign32\fP age, \fBoctad\fP *IDS, int sha)"
.br
.RI "Add PreShared Key extension to under-construction Extensions Octet (omitting binder) "
.ti -1c
.RI "void \fBaddServerNameExt\fP (\fBoctad\fP *EXT, char *servername)"
.br
.RI "Add Server name extension to under-construction Extensions Octet\&. "
.ti -1c
.RI "void \fBaddSupportedGroupsExt\fP (\fBoctad\fP *EXT, int nsg, int *supportedGroups)"
.br
.RI "Add Supported Groups extension to under-construction Extensions Octet\&. "
.ti -1c
.RI "void \fBaddSigAlgsExt\fP (\fBoctad\fP *EXT, int nsa, int *sigAlgs)"
.br
.RI "Add Supported TLS1\&.3 Signature algorithms to under-construction Extensions Octet\&. "
.ti -1c
.RI "void \fBaddSigAlgsCertExt\fP (\fBoctad\fP *EXT, int nsac, int *sigAlgsCert)"
.br
.RI "Add Supported X\&.509 Certificate Signature algorithms to under-construction Extensions Octet\&. "
.ti -1c
.RI "void \fBaddKeyShareExt\fP (\fBoctad\fP *EXT, int alg, \fBoctad\fP *PK)"
.br
.RI "Add Key Share extension to under-construction Extensions Octet\&. "
.ti -1c
.RI "void \fBaddALPNExt\fP (\fBoctad\fP *EXT, \fBoctad\fP *AP)"
.br
.RI "Add Application Layer Protocol Negotiation (ALPN) extension to under-construction Extensions Octet\&. "
.ti -1c
.RI "void \fBaddMFLExt\fP (\fBoctad\fP *EXT, int mode)"
.br
.RI "Add Maximum Fragment Length extension to under-construction Extensions Octet\&. "
.ti -1c
.RI "void \fBaddRSLExt\fP (\fBoctad\fP *EXT, int size)"
.br
.RI "Add Record Size Limit extension to under-construction Extensions Octet\&. "
.ti -1c
.RI "void \fBaddPSKModesExt\fP (\fBoctad\fP *EXT, int mode)"
.br
.RI "Add Preshared Key exchange modes extension to under-construction Extensions Octet\&. "
.ti -1c
.RI "void \fBaddVersionExt\fP (\fBoctad\fP *EXT, int version)"
.br
.RI "Add Version extension to under-construction Extensions Octet\&. "
.ti -1c
.RI "void \fBaddPadding\fP (\fBoctad\fP *EXT, int n)"
.br
.RI "Add padding extension to under-construction Extensions Octet\&. "
.ti -1c
.RI "void \fBaddCookieExt\fP (\fBoctad\fP *EXT, \fBoctad\fP *CK)"
.br
.RI "Add Cookie extension to under-construction Extensions Octet\&. "
.ti -1c
.RI "void \fBaddEarlyDataExt\fP (\fBoctad\fP *EXT)"
.br
.RI "Indicate desire to send Early Data in under-construction Extensions Octet\&. "
.ti -1c
.RI "int \fBclientRandom\fP (\fBoctad\fP *RN)"
.br
.RI "Generate 32-byte random octad\&. "
.ti -1c
.RI "int \fBcipherSuites\fP (\fBoctad\fP *CS, int ncs, int *ciphers)"
.br
.RI "Build a cipher-suites octad from supported ciphers\&. "
.ti -1c
.RI "void \fBsendFlushIO\fP (\fBTLS_session\fP *session)"
.br
.RI "Flush IO buffer\&. "
.ti -1c
.RI "void \fBsendClientMessage\fP (\fBTLS_session\fP *session, int rectype, int version, \fBoctad\fP *CM, \fBoctad\fP *EXT, bool flush)"
.br
.RI "Send a generic client message (as a single record) to the Server\&. "
.ti -1c
.RI "void \fBsendBinder\fP (\fBTLS_session\fP *session, \fBoctad\fP *BND, bool flush)"
.br
.RI "Send a preshared key binder message to the Server\&. "
.ti -1c
.RI "void \fBsendClientHello\fP (\fBTLS_session\fP *session, int version, \fBoctad\fP *CH, bool already_agreed, \fBoctad\fP *EXTENSIONS, int extra, bool resume, bool flush)"
.br
.RI "Prepare and send Client Hello message to the Server, appending prepared extensions\&. "
.ti -1c
.RI "void \fBsendAlert\fP (\fBTLS_session\fP *session, int type)"
.br
.RI "Prepare and send an Alert message to the Server\&. "
.ti -1c
.RI "void \fBsendClientFinish\fP (\fBTLS_session\fP *session, \fBoctad\fP *CHF)"
.br
.RI "Prepare and send a final handshake Verification message to the Server\&. "
.ti -1c
.RI "void \fBsendClientCertificateChain\fP (\fBTLS_session\fP *session, \fBoctad\fP *CERTCHAIN)"
.br
.RI "Prepare and send client certificate message to the Server\&. "
.ti -1c
.RI "void \fBsendClientCertVerify\fP (\fBTLS_session\fP *session, int sigAlg, \fBoctad\fP *CCVSIG)"
.br
.RI "Send client Certificate Verify message to the Server\&. "
.ti -1c
.RI "void \fBsendEndOfEarlyData\fP (\fBTLS_session\fP *session)"
.br
.RI "Indicate End of Early Data in message to the Server\&. "
.ti -1c
.RI "int \fBalert_from_cause\fP (int rtn)"
.br
.RI "Maps problem cause to Alert\&. "
.in -1c
.SH "Detailed Description"
.PP 
Process Output to be sent to the Server\&. 


.PP
\fBAuthor\fP
.RS 4
Mike Scott  
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "void addALPNExt (\fBoctad\fP * EXT, \fBoctad\fP * AP)"

.PP
Add Application Layer Protocol Negotiation (ALPN) extension to under-construction Extensions Octet\&. 
.PP
\fBParameters\fP
.RS 4
\fIEXT\fP the extensions octad which is being built 
.br
\fIAP\fP the IANA sequence associated with the expected protocol 
.RE
.PP

.SS "void addCookieExt (\fBoctad\fP * EXT, \fBoctad\fP * CK)"

.PP
Add Cookie extension to under-construction Extensions Octet\&. 
.PP
\fBParameters\fP
.RS 4
\fIEXT\fP the extensions octad which is being built 
.br
\fICK\fP the cookie octad to be added 
.RE
.PP

.SS "void addEarlyDataExt (\fBoctad\fP * EXT)"

.PP
Indicate desire to send Early Data in under-construction Extensions Octet\&. 
.PP
\fBParameters\fP
.RS 4
\fIEXT\fP the extensions octad which is being built 
.RE
.PP

.SS "void addKeyShareExt (\fBoctad\fP * EXT, int alg, \fBoctad\fP * PK)"

.PP
Add Key Share extension to under-construction Extensions Octet\&. 
.PP
\fBParameters\fP
.RS 4
\fIEXT\fP the extensions octad which is being built 
.br
\fIalg\fP the suggested key exchange algorithm 
.br
\fIPK\fP the key exchange public value to be sent to the Server 
.RE
.PP

.SS "void addMFLExt (\fBoctad\fP * EXT, int mode)"

.PP
Add Maximum Fragment Length extension to under-construction Extensions Octet\&. 
.PP
\fBParameters\fP
.RS 4
\fIEXT\fP the extensions octad which is being built 
.br
\fImode\fP the proposed maximum fragment size 
.RE
.PP

.SS "void addPadding (\fBoctad\fP * EXT, int n)"

.PP
Add padding extension to under-construction Extensions Octet\&. 
.PP
\fBParameters\fP
.RS 4
\fIEXT\fP the extensions octad which is being built 
.br
\fIn\fP the zero padding length 
.RE
.PP

.SS "int addPreSharedKeyExt (\fBoctad\fP * EXT, \fBunsign32\fP age, \fBoctad\fP * IDS, int sha)"

.PP
Add PreShared Key extension to under-construction Extensions Octet (omitting binder) 
.PP
\fBParameters\fP
.RS 4
\fIEXT\fP the extensions octad which is being built 
.br
\fIage\fP the obfuscated age of the preshared key 
.br
\fIIDS\fP the proposed preshared key identity 
.br
\fIsha\fP the hash algorithm used to calculate the HMAC binder 
.RE
.PP
\fBReturns\fP
.RS 4
length of binder to be sent later 
.RE
.PP

.SS "void addPSKModesExt (\fBoctad\fP * EXT, int mode)"

.PP
Add Preshared Key exchange modes extension to under-construction Extensions Octet\&. 
.PP
\fBParameters\fP
.RS 4
\fIEXT\fP the extensions octad which is being built 
.br
\fImode\fP the proposed preshared key mode 
.RE
.PP

.SS "void addRSLExt (\fBoctad\fP * EXT, int size)"

.PP
Add Record Size Limit extension to under-construction Extensions Octet\&. 
.PP
\fBParameters\fP
.RS 4
\fIEXT\fP the extensions octad which is being built 
.br
\fIsize\fP the demanded maximum fragment size 
.RE
.PP

.SS "void addServerNameExt (\fBoctad\fP * EXT, char * servername)"

.PP
Add Server name extension to under-construction Extensions Octet\&. 
.PP
\fBParameters\fP
.RS 4
\fIEXT\fP the extensions octad which is being built 
.br
\fIservername\fP the Host name (URL) of the Server 
.RE
.PP

.SS "void addSigAlgsCertExt (\fBoctad\fP * EXT, int nsac, int * sigAlgsCert)"

.PP
Add Supported X\&.509 Certificate Signature algorithms to under-construction Extensions Octet\&. 
.PP
\fBParameters\fP
.RS 4
\fIEXT\fP the extensions octad which is being built 
.br
\fInsac\fP Number of supported signature algorithms 
.br
\fIsigAlgsCert\fP an array of supported signature algorithms 
.RE
.PP

.SS "void addSigAlgsExt (\fBoctad\fP * EXT, int nsa, int * sigAlgs)"

.PP
Add Supported TLS1\&.3 Signature algorithms to under-construction Extensions Octet\&. 
.PP
\fBParameters\fP
.RS 4
\fIEXT\fP the extensions octad which is being built 
.br
\fInsa\fP Number of supported signature algorithms 
.br
\fIsigAlgs\fP an array of supported signature algorithms 
.RE
.PP

.SS "void addSupportedGroupsExt (\fBoctad\fP * EXT, int nsg, int * supportedGroups)"

.PP
Add Supported Groups extension to under-construction Extensions Octet\&. 
.PP
\fBParameters\fP
.RS 4
\fIEXT\fP the extensions octad which is being built 
.br
\fInsg\fP Number of supported groups 
.br
\fIsupportedGroups\fP an array of supported groups 
.RE
.PP

.SS "void addVersionExt (\fBoctad\fP * EXT, int version)"

.PP
Add Version extension to under-construction Extensions Octet\&. 
.PP
\fBParameters\fP
.RS 4
\fIEXT\fP the extensions octad which is being built 
.br
\fIversion\fP the supported TLS version 
.RE
.PP

.SS "int alert_from_cause (int rtn)"

.PP
Maps problem cause to Alert\&. 
.PP
\fBParameters\fP
.RS 4
\fIrtn\fP the cause of a problem (a function error return) 
.RE
.PP
\fBReturns\fP
.RS 4
type of Alert that should be sent to Server 
.RE
.PP

.SS "int cipherSuites (\fBoctad\fP * CS, int ncs, int * ciphers)"

.PP
Build a cipher-suites octad from supported ciphers\&. 
.PP
\fBParameters\fP
.RS 4
\fICS\fP the output cipher-suite octad 
.br
\fIncs\fP the number of supported cipher-suites 
.br
\fIciphers\fP an array of supported cipher-suites 
.RE
.PP
\fBReturns\fP
.RS 4
length of the output octad 
.RE
.PP

.SS "int clientRandom (\fBoctad\fP * RN)"

.PP
Generate 32-byte random octad\&. 
.PP
\fBParameters\fP
.RS 4
\fIRN\fP the output 32-byte octad 
.RE
.PP
\fBReturns\fP
.RS 4
length of output octad 
.RE
.PP

.SS "void sendAlert (\fBTLS_session\fP * session, int type)"

.PP
Prepare and send an Alert message to the Server\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP the TLS session structure 
.br
\fItype\fP the type of the Alert 
.RE
.PP

.SS "void sendBinder (\fBTLS_session\fP * session, \fBoctad\fP * BND, bool flush)"

.PP
Send a preshared key binder message to the Server\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP the TLS session structure 
.br
\fIBND\fP binding HMAC of truncated transcript hash 
.br
\fIflush\fP transmit immediately if true 
.RE
.PP

.SS "void sendCCCS (\fBTLS_session\fP * session)"

.PP
Send Change Cipher Suite message\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP the TLS session structure 
.RE
.PP

.SS "void sendClientCertificateChain (\fBTLS_session\fP * session, \fBoctad\fP * CERTCHAIN)"

.PP
Prepare and send client certificate message to the Server\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP the TLS session structure 
.br
\fICERTCHAIN\fP the client certificate chain 
.RE
.PP

.SS "void sendClientCertVerify (\fBTLS_session\fP * session, int sigAlg, \fBoctad\fP * CCVSIG)"

.PP
Send client Certificate Verify message to the Server\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP the TLS session structure 
.br
\fIsigAlg\fP the client's digital signature algorithm 
.br
\fICCVSIG\fP the client's signature 
.RE
.PP

.SS "void sendClientFinish (\fBTLS_session\fP * session, \fBoctad\fP * CHF)"

.PP
Prepare and send a final handshake Verification message to the Server\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP the TLS session structure 
.br
\fICHF\fP the client verify data HMAC 
.RE
.PP

.SS "void sendClientHello (\fBTLS_session\fP * session, int version, \fBoctad\fP * CH, bool already_agreed, \fBoctad\fP * EXTENSIONS, int extra, bool resume, bool flush)"

.PP
Prepare and send Client Hello message to the Server, appending prepared extensions\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP the TLS session structure 
.br
\fIversion\fP TLS version indication 
.br
\fICH\fP workspace octad in which to build client Hello 
.br
\fIalready_agreed\fP true if cipher suite previously negotiated, else false 
.br
\fIEXTENSIONS\fP pre-prepared extensions 
.br
\fIextra\fP length of preshared key binder to be sent later 
.br
\fIresume\fP true if this hello is for handshae resumption 
.br
\fIflush\fP transmit immediately 
.RE
.PP

.SS "void sendClientMessage (\fBTLS_session\fP * session, int rectype, int version, \fBoctad\fP * CM, \fBoctad\fP * EXT, bool flush)"

.PP
Send a generic client message (as a single record) to the Server\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP the TLS session structure 
.br
\fIrectype\fP the record type 
.br
\fIversion\fP TLS version indication 
.br
\fICM\fP the client message to be sent 
.br
\fIEXT\fP extensions to be added (or NULL if there are none) 
.br
\fIflush\fP transmit immediately if true 
.RE
.PP

.SS "void sendEndOfEarlyData (\fBTLS_session\fP * session)"

.PP
Indicate End of Early Data in message to the Server\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP the TLS session structure 
.RE
.PP

.SS "void sendFlushIO (\fBTLS_session\fP * session)"

.PP
Flush IO buffer\&. 
.PP
\fBParameters\fP
.RS 4
\fIsession\fP the TLS session structure 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for TiigerTLS from the source code\&.

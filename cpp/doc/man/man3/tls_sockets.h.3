.TH "C:/Users/mscot/TLS1.3/cpp/include/tls_sockets.h" 3 "Mon Oct 3 2022" "Version 1.2" "TiigerTLS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Users/mscot/TLS1.3/cpp/include/tls_sockets.h \- set up sockets for reading and writing  

.SH SYNOPSIS
.br
.PP
\fC#include <string\&.h>\fP
.br
\fC#include 'tls_octads\&.h'\fP
.br
\fC#include <time\&.h>\fP
.br
\fC#include <unistd\&.h>\fP
.br
\fC#include <stdio\&.h>\fP
.br
\fC#include <sys/socket\&.h>\fP
.br
\fC#include <arpa/inet\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <netinet/in\&.h>\fP
.br
\fC#include <netdb\&.h>\fP
.br
\fC#include <sys/un\&.h>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBSocket\fP"
.br
.RI "\fBSocket\fP instance\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBsetclientsock\fP (int port, char *ip, int toms)"
.br
.RI "create a client socket "
.ti -1c
.RI "int \fBgetIPaddress\fP (char *ip, char *hostname)"
.br
.RI "get the IP address from a URL "
.ti -1c
.RI "void \fBsendOctad\fP (\fBSocket\fP *client, \fBoctad\fP *B)"
.br
.RI "send an octet over a socket "
.ti -1c
.RI "void \fBsendLen\fP (\fBSocket\fP *client, int len)"
.br
.RI "send a 16-bit integer as an octet to Server "
.ti -1c
.RI "int \fBgetBytes\fP (\fBSocket\fP *client, char *b, int expected)"
.br
.RI "receive bytes over a socket sonnection "
.ti -1c
.RI "int \fBgetInt16\fP (\fBSocket\fP *client)"
.br
.RI "receive 16-bit integer from a socket "
.ti -1c
.RI "int \fBgetInt24\fP (\fBSocket\fP *client)"
.br
.RI "receive 24-bit integer from a socket "
.ti -1c
.RI "int \fBgetByte\fP (\fBSocket\fP *client)"
.br
.RI "receive a single byte from a socket "
.ti -1c
.RI "int \fBgetOctad\fP (\fBSocket\fP *client, \fBoctad\fP *B, int expected)"
.br
.RI "receive an octet from a socket "
.in -1c
.SH "Detailed Description"
.PP 
set up sockets for reading and writing 


.PP
\fBAuthor\fP
.RS 4
Mike Scott  
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "int getByte (\fBSocket\fP * client)"

.PP
receive a single byte from a socket 
.PP
\fBParameters\fP
.RS 4
\fIclient\fP the socket connection to the Server 
.RE
.PP
\fBReturns\fP
.RS 4
a byte 
.RE
.PP

.SS "int getBytes (\fBSocket\fP * client, char * b, int expected)"

.PP
receive bytes over a socket sonnection 
.PP
\fBParameters\fP
.RS 4
\fIclient\fP the socket connection to the Server 
.br
\fIb\fP the received bytes 
.br
\fIexpected\fP the number of bytes expected 
.RE
.PP
\fBReturns\fP
.RS 4
-1 on failure, 0 on success 
.RE
.PP

.SS "int getInt16 (\fBSocket\fP * client)"

.PP
receive 16-bit integer from a socket 
.PP
\fBParameters\fP
.RS 4
\fIclient\fP the socket connection to the Server 
.RE
.PP
\fBReturns\fP
.RS 4
a 16-bit integer 
.RE
.PP

.SS "int getInt24 (\fBSocket\fP * client)"

.PP
receive 24-bit integer from a socket 
.PP
\fBParameters\fP
.RS 4
\fIclient\fP the socket connection to the Server 
.RE
.PP
\fBReturns\fP
.RS 4
a 24-bit integer 
.RE
.PP

.SS "int getIPaddress (char * ip, char * hostname)"

.PP
get the IP address from a URL 
.PP
\fBParameters\fP
.RS 4
\fIip\fP the IP address 
.br
\fIhostname\fP the input Server name (URL) 
.RE
.PP
\fBReturns\fP
.RS 4
1 for success, 0 for failure 
.RE
.PP

.SS "int getOctad (\fBSocket\fP * client, \fBoctad\fP * B, int expected)"

.PP
receive an octet from a socket 
.PP
\fBParameters\fP
.RS 4
\fIclient\fP the socket connection to the Server 
.br
\fIB\fP the output octet 
.br
\fIexpected\fP the number of bytes expected 
.RE
.PP
\fBReturns\fP
.RS 4
-1 on failure, 0 on success 
.RE
.PP

.SS "void sendLen (\fBSocket\fP * client, int len)"

.PP
send a 16-bit integer as an octet to Server 
.PP
\fBParameters\fP
.RS 4
\fIclient\fP the socket connection to the Server 
.br
\fIlen\fP the 16-bit integer to be encoded as octet and transmitted 
.RE
.PP

.SS "void sendOctad (\fBSocket\fP * client, \fBoctad\fP * B)"

.PP
send an octet over a socket 
.PP
\fBParameters\fP
.RS 4
\fIclient\fP the socket connection to the Server 
.br
\fIB\fP the octet to be transmitted 
.RE
.PP

.SS "int setclientsock (int port, char * ip, int toms)"

.PP
create a client socket 
.PP
\fBParameters\fP
.RS 4
\fIport\fP the TCP/IP port on which to connect 
.br
\fIip\fP the IP address with which to connect 
.br
\fItoms\fP the time-out period in milliseconds 
.RE
.PP
\fBReturns\fP
.RS 4
the socket handle 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for TiigerTLS from the source code\&.

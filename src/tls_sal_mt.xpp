// 
// Cryptographic API - this version uses MIRACL core functions + TIIcrypto
//

#include "tls_sal.h"

// Pull in MIRACL core code

#include "core.h"
#include "ecdh_NIST256.h"  
#include "ecdh_NIST384.h"
#include "ecdh_C25519.h"
#include "rsa_RSA2048.h"
#include "rsa_RSA4096.h"

// Use TIIcrypto 

extern "C" 
{
    #include "aes.h"
    #include "aes_gcm.h"
    #include "chacha20.h"
    #include "chacha20_poly1305_aead.h"
    #include "tii_prng.h"
    #include "tii_mac.h"
    #include "sha2.h"
}

using namespace core;

csprng RNG;    // Global miracl core Crypto Strong RNG - could be a hardware source

void TLS_SAL_INITLIB()
{ // Initialise library
    uint8_t raw[100];
    tii_prng_get_bytes(raw, 100); // get true random seed
    RAND_seed(&RNG, 100, (char *)raw);  
}

int TLS_SAL_CIPHERS(int *ciphers)
{
    int n=2;
    ciphers[0]=TLS_AES_128_GCM_SHA256;
    ciphers[1]=TLS_AES_256_GCM_SHA384;
    return n;
}

int TLS_SAL_GROUPS(int *groups)
{
    int n=3;
    groups[0]=X25519;
    groups[1]=SECP256R1;
    groups[2]=SECP384R1;
    return n;
}

int TLS_SAL_SIGS(int *sigAlgs)
{
    int n=3;
    sigAlgs[0]=ECDSA_SECP256R1_SHA256;
    sigAlgs[1]=RSA_PSS_RSAE_SHA256;
    sigAlgs[2]=ECDSA_SECP384R1_SHA384;
    return n;
}

int TLS_SAL_SIGCERTS(int *sigAlgsCert)
{
    int n=5;
    sigAlgsCert[0]=ECDSA_SECP256R1_SHA256;
    sigAlgsCert[1]=RSA_PKCS1_SHA256;
    sigAlgsCert[2]=ECDSA_SECP384R1_SHA384;
    sigAlgsCert[3]=RSA_PKCS1_SHA384;
    sigAlgsCert[4]=RSA_PKCS1_SHA512;

    return n;
}

// convert TLS octad to MIRACL core octet
static octet octad_to_octet(octad *x)
{
    octet y;
    if (x!=NULL) {
        y.len=x->len;
        y.max=x->max;
        y.val=x->val;
    } else {
        y.len=y.max=0;
        y.val=NULL;
    }
    return y;
}

// Return a random byte
int TLS_RANDOM_BYTE()
{
    uint8_t b[1];
    tii_prng_get_bytes(b, 1);
    return (int)b[0]&0xff;
}

// Fill an octad with random values
void TLS_RANDOM_OCTAD(int len,octad *R)
{
    tii_prng_get_bytes((uint8_t *)R->val, len);
    R->len=len;
}

// create expanded HKDF label LB from label and context
static void hkdfLabel(octad *LB,int length,octad *Label,octad *CTX)
{
    OCT_append_int(LB,length,2);    // 2
    OCT_append_byte(LB,(char)(6+Label->len),1);  // 1
    OCT_append_string(LB,(char *)"tls13 ");   // 6
    OCT_append_octad(LB,Label);  // Label->len
    if (CTX!=NULL)
    {
        OCT_append_byte(LB, (char)(CTX->len), 1); // 1
        OCT_append_octad(LB,CTX);   // CTX->len
    } else {
        OCT_append_byte(LB,0,1);   // 1
    }
}

// HKDF extension for TLS1.3
void TLS_HKDF_Expand_Label(int sha,octad *OKM,int olen,octad *PRK,octad *Label,octad *CTX)
{
    char hl[TLS_MAX_HASH+24];
    octad HL={0,sizeof(hl),hl};

    octet MC_OKM=octad_to_octet(OKM); 
    octet MC_PRK=octad_to_octet(PRK);

    hkdfLabel(&HL,olen,Label,CTX);
    octet MC_HL=octad_to_octet(&HL);
    HKDF_Expand(MC_SHA2,sha,&MC_OKM,olen,&MC_PRK,&MC_HL);
    OKM->len=MC_OKM.len;
    PRK->len=MC_PRK.len;
}

// HKDF - Extract secret from raw input
void TLS_HKDF_Extract(int sha,octad *PRK,octad *SALT,octad *IKM)
{
    octet MC_PRK=octad_to_octet(PRK);   // Make it MIRACL core compatible
    octet MC_SALT=octad_to_octet(SALT);
    octet MC_IKM=octad_to_octet(IKM);

    HKDF_Extract(MC_SHA2,sha,&MC_PRK,&MC_SALT,&MC_IKM);

    IKM->len=MC_IKM.len;              // restore length
    SALT->len=MC_SALT.len;
    PRK->len=MC_PRK.len;
}

// TLS HMAC
void TLS_HMAC(int sha,octad *T,octad *K,octad *M)
{
    if (sha==TLS_SHA256) {
        sha256hmac_ctx_t hmacctx;
        sha256hmac_reset(&hmacctx,(uint8_t *)K->val,TLS_SHA256);
        sha256hmac_update(&hmacctx,(uint8_t *)M->val,(const uint64_t)M->len);
        sha256hmac_final(&hmacctx,(uint8_t *)T->val,TLS_SHA256);
        T->len=TLS_SHA256;
    }
    if (sha==TLS_SHA384) {

        sha384hmac_ctx_t hmacctx;
        sha384hmac_reset(&hmacctx,(uint8_t *)K->val,TLS_SHA384);
        sha384hmac_update(&hmacctx,(uint8_t *)M->val,(const uint64_t)M->len);
        sha384hmac_final(&hmacctx,(uint8_t *)T->val,TLS_SHA384);

        T->len=TLS_SHA384;
    }
    if (sha==TLS_SHA512) {
        sha512hmac_ctx_t hmacctx;
        sha512hmac_reset(&hmacctx,(uint8_t *)K->val,TLS_SHA512);
        sha512hmac_update(&hmacctx,(uint8_t *)M->val,(const uint64_t)M->len);
        sha512hmac_final(&hmacctx,(uint8_t *)T->val,TLS_SHA512);
        T->len=TLS_SHA512;
    }
}

// TLS HASH
void TLS_HASH(int sha,octad *H,octad *M)
{
    octet MC_H=octad_to_octet(H);
    if (M!=NULL)
    {
        octet MC_M=octad_to_octet(M);
        SPhash(MC_SHA2,sha,&MC_H,&MC_M);
    } else {
        SPhash(MC_SHA2,sha,&MC_H,NULL);
    }
    H->len=MC_H.len;
}

// Unified hashing. SHA2 type indicate by hlen. For SHA256 hlen=32 etc
void Hash_Init(int hlen,unihash *h)
{
    if (hlen==TLS_SHA256) 
        HASH256_init((core::hash256*)&(h->state));
    if (hlen==TLS_SHA384)
        HASH384_init((core::hash512*)&(h->state));
    if (hlen==TLS_SHA512)
        HASH512_init((core::hash512*)&(h->state));
    h->hlen=hlen;
}

// Process a byte
void Hash_Process(unihash *h,int b)
{
    if (h->hlen==TLS_SHA256)
        HASH256_process((core::hash256*)&(h->state),b);
    if (h->hlen==TLS_SHA384)
        HASH384_process((core::hash512*)&(h->state),b);
    if (h->hlen==TLS_SHA512)
        HASH512_process((core::hash512*)&(h->state),b);
}

// output digest
void Hash_Output(unihash *h,char *d)
{
    if (h->hlen==TLS_SHA256)
        HASH256_continuing_hash((core::hash256*)&(h->state),d);
    if (h->hlen==TLS_SHA384)
        HASH384_continuing_hash((core::hash512*)&(h->state),d);
    if (h->hlen==TLS_SHA512)
        HASH384_continuing_hash((core::hash512*)&(h->state),d);
}

void AEAD_ENCRYPT(crypto *send,int hdrlen,char *hdr,int ptlen,char *pt,octad *TAG)
{ // AEAD encryption
    if (send->suite==TLS_CHACHA20_POLY1305_SHA256)
    { 
        uint8_t iv[8];
        uint8_t constant[4];
        for (int i=0;i<4;i++)
            constant[i]=send->IV.val[i];
        for (int i=0;i<8;i++)
            iv[i]=send->IV.val[4+i];
        chacha20_poly1305_aead_encrypt((uint8_t *)send->K.val,iv,constant,(uint8_t *)pt,(uint64_t)ptlen,(uint8_t *)hdr,(uint64_t)hdrlen,(uint8_t *)pt,(uint8_t *)TAG->val);
    } 
    if (send->suite==TLS_AES_128_GCM_SHA256)
    {
        aes128_gcm_encrypt((uint8_t *)send->K.val,(uint8_t *)send->IV.val,12,(uint8_t *)pt,(uint64_t)ptlen,(uint8_t *)hdr,(uint64_t)hdrlen,(uint8_t *)pt,(uint8_t *)TAG->val);
    }
    if (send->suite==TLS_AES_256_GCM_SHA384)
    {
        aes256_gcm_encrypt((uint8_t *)send->K.val,(uint8_t *)send->IV.val,12,(uint8_t *)pt,(uint64_t)ptlen,(uint8_t *)hdr,(uint64_t)hdrlen,(uint8_t *)pt,(uint8_t *)TAG->val);
    }
    TAG->len=16;
}

int AEAD_DECRYPT(crypto *recv,int hdrlen,char *hdr,int ctlen,char *ct,octad *TAG)
{ // AEAD decryption
    if (recv->suite==TLS_CHACHA20_POLY1305_SHA256)
    {
        uint8_t iv[8];
        uint8_t constant[4];
        for (int i=0;i<4;i++)
            constant[i]=recv->IV.val[i];
        for (int i=0;i<8;i++)
            iv[i]=recv->IV.val[4+i];
        return chacha20_poly1305_aead_decrypt((uint8_t *)recv->K.val,iv,constant,(uint8_t *)ct,(uint64_t)ctlen,(uint8_t *)hdr,(uint64_t)hdrlen,(uint8_t *)ct,(uint8_t *)TAG->val);
    }
    if (recv->suite==TLS_AES_128_GCM_SHA256)
    {
        return aes128_gcm_decrypt((uint8_t *)recv->K.val,(uint8_t *)recv->IV.val,12,(uint8_t *)ct,(uint64_t)ctlen,(uint8_t *)hdr,(uint64_t)hdrlen,(uint8_t *)ct,(uint8_t *)TAG->val);
    }
    if (recv->suite==TLS_AES_256_GCM_SHA384)
    {
        return aes256_gcm_decrypt((uint8_t *)recv->K.val,(uint8_t *)recv->IV.val,12,(uint8_t *)ct,(uint64_t)ctlen,(uint8_t *)hdr,(uint64_t)hdrlen,(uint8_t *)ct,(uint8_t *)TAG->val);
    }
    return -1;
}

// generate a public/private key pair in an approved group for a key exchange
void GENERATE_KEY_PAIR(int group,octad *SK,octad *PK)
{
// Random secret key
    TLS_RANDOM_OCTAD(32,SK);
    if (group==X25519)
    { // RFC7748 the secret key
        SK->val[31]&=248;  
        SK->val[0]&=127;
        SK->val[0]|=64;
    }

    octet MC_SK=octad_to_octet(SK);
    octet MC_PK=octad_to_octet(PK);
    if (group==X25519)
    {
        C25519::ECP_KEY_PAIR_GENERATE(NULL, &MC_SK, &MC_PK);
        OCT_reverse(&MC_PK);  // public key must be transmitted in little-endian form
    }
    if (group==SECP256R1)
    {
        NIST256::ECP_KEY_PAIR_GENERATE(NULL, &MC_SK, &MC_PK);
    }
    if (group==SECP384R1)
    {
        NIST384::ECP_KEY_PAIR_GENERATE(NULL, &MC_SK, &MC_PK);
    }

    SK->len=MC_SK.len;
    PK->len=MC_PK.len;

}

// generate shared secret SS from secret key SK and public key PK
void GENERATE_SHARED_SECRET(int group,octad *SK,octad *PK,octad *SS)
{
    octet MC_SK=octad_to_octet(SK);
    octet MC_PK=octad_to_octet(PK);
    octet MC_SS=octad_to_octet(SS);

    if (group==X25519) {
        OCT_reverse(&MC_PK); // to big endian
        C25519::ECP_SVDP_DH(&MC_SK, &MC_PK, &MC_SS,0);
        OCT_reverse(&MC_PK); // back again
        OCT_reverse(&MC_SS);
    }
    if (group==SECP256R1) {
        NIST256::ECP_SVDP_DH(&MC_SK, &MC_PK, &MC_SS,0);
    }
    if (group==SECP384R1) {
        NIST384::ECP_SVDP_DH(&MC_SK, &MC_PK, &MC_SS,0);
    }
    SK->len=MC_SK.len;
    PK->len=MC_PK.len;
    SS->len=MC_SS.len;
}

// RSA 2048-bit PKCS1.5 signature verification
bool RSA_2048_PKCS15_VERIFY(int sha,octad *CERT,octad *SIG,octad *PUBKEY)
{
    bool res;
    char p1[RFS_RSA2048];
    octet P1={0,sizeof(p1),p1};
    char p2[RFS_RSA2048];
    octet P2={0,sizeof(p2),p2};

    octet MC_CERT=octad_to_octet(CERT);
    octet MC_SIG=octad_to_octet(SIG);
    octet MC_PUBKEY=octad_to_octet(PUBKEY);

    RSA2048::rsa_public_key PK;
    PK.e = 65537; // assuming this!
    RSA2048::RSA_fromOctet(PK.n, &MC_PUBKEY);
    RSA2048::RSA_ENCRYPT(&PK, &MC_SIG, &P2);
    PKCS15(sha, &MC_CERT, &P1);
    res=OCT_comp(&P1, &P2);
    if (!res)
    { // check alternate PKCS1.5 encoding
        PKCS15b(sha, &MC_CERT, &P1);
        res=OCT_comp(&P1, &P2);
    }
    return res;
}

// RSA 4096-bit PKCS1.5 signature verification
bool RSA_4096_PKCS15_VERIFY(int sha,octad *CERT,octad *SIG,octad *PUBKEY)
{
    bool res;
    char p1[RFS_RSA4096];
    octet P1={0,sizeof(p1),p1};
    char p2[RFS_RSA4096];
    octet P2={0,sizeof(p2),p2};

    octet MC_CERT=octad_to_octet(CERT);
    octet MC_SIG=octad_to_octet(SIG);
    octet MC_PUBKEY=octad_to_octet(PUBKEY);

    RSA4096::rsa_public_key PK;
    PK.e = 65537; // assuming this!
    RSA4096::RSA_fromOctet(PK.n, &MC_PUBKEY);
    RSA4096::RSA_ENCRYPT(&PK, &MC_SIG, &P2);
    PKCS15(sha, &MC_CERT, &P1);
    res=OCT_comp(&P1, &P2);
    if (!res)
    { // check alternate PKCS1.5 encoding
        PKCS15b(sha, &MC_CERT, &P1);
        res=OCT_comp(&P1, &P2);
    }
    return res;
}

// RSA 2048-bit PSS-RSAE signature verification
bool RSA_2048_PSS_RSAE_VERIFY(int sha,octad *MESS,octad *SIG,octad *PUBKEY)
{
    char p[RFS_RSA2048];
    octet P={0,sizeof(p),p};

    octet MC_MESS=octad_to_octet(MESS);
    octet MC_SIG=octad_to_octet(SIG);
    octet MC_PUBKEY=octad_to_octet(PUBKEY);

    RSA2048::rsa_public_key PK;
    PK.e = 65537;
    RSA2048::RSA_fromOctet(PK.n, &MC_PUBKEY);
    RSA2048::RSA_ENCRYPT(&PK, &MC_SIG, &P);
    if (PSS_VERIFY(sha,&MC_MESS,&P)) 
        return true;
    return false;
}

// RSA 4096-bit PSS-RSAE signature verification
bool RSA_4096_PSS_RSAE_VERIFY(int sha,octad *MESS,octad *SIG,octad *PUBKEY)
{
    char p[RFS_RSA4096];
    octet P={0,sizeof(p),p};

    octet MC_MESS=octad_to_octet(MESS);
    octet MC_SIG=octad_to_octet(SIG);
    octet MC_PUBKEY=octad_to_octet(PUBKEY);

    RSA4096::rsa_public_key PK;
    PK.e = 65537;
    RSA4096::RSA_fromOctet(PK.n, &MC_PUBKEY);
    RSA4096::RSA_ENCRYPT(&PK, &MC_SIG, &P);
    if (PSS_VERIFY(sha,&MC_MESS,&P)) 
        return true;
    return false;
}

// Curve SECP256R1 elliptic curve ECDSA verification
bool SECP256R1_ECDSA_VERIFY(int sha,octad *CERT,octad *R,octad *S,octad *PUBKEY)
{
    int res;

    octet MC_CERT=octad_to_octet(CERT);
    octet MC_R=octad_to_octet(R);
    octet MC_S=octad_to_octet(S);
    octet MC_PUBKEY=octad_to_octet(PUBKEY);

    res=NIST256::ECP_PUBLIC_KEY_VALIDATE(&MC_PUBKEY);
    if (res!=0) return false;
    res=NIST256::ECP_VP_DSA(sha, &MC_PUBKEY, &MC_CERT, &MC_R, &MC_S);
    if (res!=0) return false;
    return true;
}

// Curve SECP384R1 elliptic curve ECDSA verification
bool SECP384R1_ECDSA_VERIFY(int sha,octad *CERT,octad *R,octad *S,octad *PUBKEY)
{
    int res;

    octet MC_CERT=octad_to_octet(CERT);
    octet MC_R=octad_to_octet(R);
    octet MC_S=octad_to_octet(S);
    octet MC_PUBKEY=octad_to_octet(PUBKEY);

    res=NIST384::ECP_PUBLIC_KEY_VALIDATE(&MC_PUBKEY);
    if (res!=0) return false;
    res=NIST384::ECP_VP_DSA(sha, &MC_PUBKEY, &MC_CERT, &MC_R, &MC_S);
    if (res!=0) return false;
    return true;
}

// Use Curve SECP256R1 ECDSA to digitally sign a message using a private key 
void SECP256R1_ECDSA_SIGN(int sha,octad *KEY,octad *MESS,octad *R,octad *S)
{
    octet MC_MESS=octad_to_octet(MESS);
    octet MC_KEY=octad_to_octet(KEY);
    octet MC_R=octad_to_octet(R);
    octet MC_S=octad_to_octet(S);

    NIST256::ECP_SP_DSA(sha, &RNG, NULL, &MC_KEY, &MC_MESS, &MC_R, &MC_S);

    R->len=MC_R.len;
    S->len=MC_S.len;
}

// Use Curve SECP384R1 ECDSA to digitally sign a message using a private key 
void SECP384R1_ECDSA_SIGN(int sha,octad *KEY,octad *MESS,octad *R,octad *S)
{
    octet MC_MESS=octad_to_octet(MESS);
    octet MC_KEY=octad_to_octet(KEY);
    octet MC_R=octad_to_octet(R);
    octet MC_S=octad_to_octet(S);

    NIST256::ECP_SP_DSA(sha, &RNG, NULL, &MC_KEY, &MC_MESS, &MC_R, &MC_S);

    R->len=MC_R.len;
    S->len=MC_S.len;
}

// Use RSA-2048 PSS-RSAE to digitally sign a message using a private key
void RSA_2048_PSS_RSAE_SIGN(int sha,octad *KEY,octad *MESS,octad *SIG)
{
    int len=KEY->len/5;   // length of p and q
    if (len!=128) return;
    char p[128];
    octet P={len,sizeof(p),p};
    char q[128];
    octet Q={len,sizeof(q),q};
    char dp[128];
    octet DP={len,sizeof(dp),dp};
    char dq[128];
    octet DQ={len,sizeof(dq),dq};
    char c[128];
    octet C={len,sizeof(c),c}; 
    for (int i=0;i<len;i++)
    {
        p[i]=KEY->val[i];
        q[i]=KEY->val[i+len];
        dp[i]=KEY->val[i+2*len];
        dq[i]=KEY->val[i+3*len];
        c[i]=KEY->val[i+4*len];
    }
    RSA2048::rsa_private_key SK;
    char enc[256];
    octet ENC={0,sizeof(enc),enc};
    RSA2048::RSA_PRIVATE_KEY_FROM_OPENSSL(&P,&Q,&DP,&DQ,&C,&SK);

    octet MC_MESS=octad_to_octet(MESS);
    octet MC_SIG=octad_to_octet(SIG);

    PSS_ENCODE(sha, &MC_MESS, &RNG, &ENC);
    RSA2048::RSA_DECRYPT(&SK,&ENC,&MC_SIG);
    SIG->len=MC_SIG.len;
}

// Use RSA-4096 PSS-RSAE to digitally sign a message using a private key
void RSA_4096_PSS_RSAE_SIGN(int sha,octad *KEY,octad *MESS,octad *SIG)
{
    int len=KEY->len/5;   // length of p and q
    if (len!=256) return;
    char p[256];
    octet P={len,sizeof(p),p};
    char q[256];
    octet Q={len,sizeof(q),q};
    char dp[256];
    octet DP={len,sizeof(dp),dp};
    char dq[256];
    octet DQ={len,sizeof(dq),dq};
    char c[256];
    octet C={len,sizeof(c),c}; 
    for (int i=0;i<len;i++)
    {
        p[i]=KEY->val[i];
        q[i]=KEY->val[i+len];
        dp[i]=KEY->val[i+2*len];
        dq[i]=KEY->val[i+3*len];
        c[i]=KEY->val[i+4*len];
    }
    RSA4096::rsa_private_key SK;
    char enc[512];
    octet ENC={0,sizeof(enc),enc};

    octet MC_MESS=octad_to_octet(MESS);
    octet MC_SIG=octad_to_octet(SIG);

    RSA4096::RSA_PRIVATE_KEY_FROM_OPENSSL(&P,&Q,&DP,&DQ,&C,&SK);
    PSS_ENCODE(sha, &MC_MESS, &RNG, &ENC);
    RSA4096::RSA_DECRYPT(&SK,&ENC,&MC_SIG);
    SIG->len=MC_SIG.len;
}

// 
// Cryptographic Security Abstraction Layer API - this version uses MIRACL core functions + TIIcrypto
//

#include "tls_sal.h"

// Pull in MIRACL core code

#include "core.h"
#include "ecdh_NIST256.h"  
#include "ecdh_NIST384.h"
#include "ecdh_C25519.h"
#include "rsa_RSA2048.h"
#include "rsa_RSA4096.h"
#include "dilithium.h"
#include "kyber.h"

// Use TIIcrypto - must suggest default curve for legacy support

#define TII_NIST_P256  // good choice?

// gcc -c -I../tii-cryptolib/src tls_sal.cpp

extern "C" 
{
    #include <aes/aes.h>
    #include <aes/aes_gcm.h>
    #include <chacha20/chacha20.h>
    #include <chacha20_poly1305_aead/chacha20_poly1305_aead.h>
    #include <tii_prng/tii_prng.h>
    #include <sha2/sha2.h>
    #include <eccore/eckeys.h>
    #include <ecdh/ecdh.h>
    #include <eddsa/eddsa.h>
}

using namespace core;

csprng RNG;    // Global miracl core Crypto Strong RNG - could be a hardware source

char* SAL_name()
{
    return (char *)"MIRACL Core and TIICrypto"; 
}

bool SAL_initLib()
{ // Initialise library
    uint8_t raw[64];
    tii_prng_get_bytes(raw, 64); // get true random seed
    RAND_seed(&RNG, 64, (char *)raw);  
    return true;
}

void SAL_endLib()
{
}

int SAL_ciphers(int *ciphers)
{
    int n=2;
    ciphers[0]=TLS_AES_128_GCM_SHA256;
    ciphers[1]=TLS_AES_256_GCM_SHA384;
    return n;
}

int SAL_groups(int *groups)
{
    int n=4;
    groups[0]=X25519;
    groups[1]=SECP256R1;
    groups[2]=SECP384R1;
    groups[3]=KYBER768;
    //n=1;
    //groups[0]=SECP256R1;
    return n;
}

int SAL_sigs(int *sigAlgs)
{
    int n=5;
    sigAlgs[0]=ECDSA_SECP256R1_SHA256;
    sigAlgs[1]=RSA_PSS_RSAE_SHA256;
    sigAlgs[2]=ECDSA_SECP384R1_SHA384;
    sigAlgs[3]=ED25519;
    sigAlgs[4]=DILITHIUM3;
    return n;
}

int SAL_sigCerts(int *sigAlgsCert)
{
    int n=7;
    sigAlgsCert[0]=ECDSA_SECP256R1_SHA256;
    sigAlgsCert[1]=RSA_PKCS1_SHA256;
    sigAlgsCert[2]=ECDSA_SECP384R1_SHA384;
    sigAlgsCert[3]=RSA_PKCS1_SHA384;
    sigAlgsCert[4]=RSA_PKCS1_SHA512;
    sigAlgsCert[5]=ED25519;
    sigAlgsCert[6]=DILITHIUM3;
    return n;
}

// return hashtype from cipher_suite
int SAL_hashType(int cipher_suite)
{
    int htype=TLS_SHA256_T;   // SHA256 default;
    if (cipher_suite==TLS_AES_128_GCM_SHA256) htype=TLS_SHA256_T;
    if (cipher_suite==TLS_AES_256_GCM_SHA384) htype=TLS_SHA384_T;
    if (cipher_suite==TLS_CHACHA20_POLY1305_SHA256) htype=TLS_SHA256_T;
    return htype;
}

// return hashtype from signature algorithm
/*
int SAL_hashTypeSig(int sigAlg)
{
    int htype=0;  
    if (sigAlg==ECDSA_SECP256R1_SHA256) htype=TLS_SHA256_T;
    if (sigAlg==ECDSA_SECP384R1_SHA384) htype=TLS_SHA384_T;
    if (sigAlg==RSA_PSS_RSAE_SHA256) htype=TLS_SHA256_T;
    if (sigAlg==RSA_PSS_RSAE_SHA384) htype=TLS_SHA384_T;
    if (sigAlg==RSA_PSS_RSAE_SHA512) htype=TLS_SHA512_T;
    if (sigAlg==RSA_PKCS1_SHA256) htype=TLS_SHA256_T;
    if (sigAlg==RSA_PKCS1_SHA384) htype=TLS_SHA384_T;
    if (sigAlg==RSA_PKCS1_SHA512) htype=TLS_SHA512_T;
    return htype;
}
*/
// return hash length from hash type
int SAL_hashLen(int hash_type)
{
    int hlen=0;
    if (hash_type==TLS_SHA256_T) hlen=32;
    if (hash_type==TLS_SHA384_T) hlen=48;
    if (hash_type==TLS_SHA512_T) hlen=64;
    return hlen;
}

int SAL_aeadKeylen(int cipher_suite)
{
    int klen=0;
    if (cipher_suite==TLS_AES_128_GCM_SHA256) klen=16;
    if (cipher_suite==TLS_AES_256_GCM_SHA384) klen=32;
    if (cipher_suite==TLS_CHACHA20_POLY1305_SHA256) klen=32;
    return klen;
}

int SAL_aeadTaglen(int cipher_suite)
{
    int tlen=0;
    if (cipher_suite==TLS_AES_128_GCM_SHA256) tlen=16;
    if (cipher_suite==TLS_AES_256_GCM_SHA384) tlen=16;
    if (cipher_suite==TLS_CHACHA20_POLY1305_SHA256) tlen=16;
    return tlen;
}

// convert TLS octad to MIRACL core octet
static octet octad_to_octet(octad *x)
{
    octet y;
    if (x!=NULL) {
        y.len=x->len;
        y.max=x->max;
        y.val=x->val;
    } else {
        y.len=y.max=0;
        y.val=NULL;
    }
    return y;
}

// Return a random byte
int SAL_randomByte()
{
    uint8_t b[1];
    tii_prng_get_bytes(b, 1);
    return (int)b[0]&0xff;
}

// Fill an octad with random values
void SAL_randomOctad(int len,octad *R)
{
    tii_prng_get_bytes((uint8_t *)R->val, len);
    R->len=len;
}

// HKDF - Extract secret from raw input
void SAL_hkdfExtract(int htype,octad *PRK,octad *SALT,octad *IKM)
{
    int hlen=SAL_hashLen(htype);
    octet MC_PRK=octad_to_octet(PRK);   // Make it MIRACL core compatible
    octet MC_SALT=octad_to_octet(SALT);
    octet MC_IKM=octad_to_octet(IKM);

    HKDF_Extract(MC_SHA2,hlen,&MC_PRK,&MC_SALT,&MC_IKM);

    IKM->len=MC_IKM.len;              // restore length
    SALT->len=MC_SALT.len;
    PRK->len=MC_PRK.len;
}

void SAL_hkdfExpand(int htype, int olen, octad *OKM,octad *PRK, octad *INFO)
{
    int hlen=SAL_hashLen(htype);
    octet MC_OKM=octad_to_octet(OKM); 
    octet MC_INFO=octad_to_octet(INFO);
    octet MC_PRK=octad_to_octet(PRK);

    HKDF_Expand(MC_SHA2,hlen,&MC_OKM,olen,&MC_PRK,&MC_INFO);

    OKM->len=MC_OKM.len;
    INFO->len=MC_INFO.len;
    PRK->len=MC_PRK.len;
}

// HMAC
void SAL_hmac(int htype,octad *T,octad *K,octad *M)
{
    int hlen=SAL_hashLen(htype);
    if (htype==TLS_SHA256_T) {
        sha256hmac_ctx_t hmacctx;
        sha256hmac_reset(&hmacctx,(uint8_t *)K->val,hlen);
        sha256hmac_update(&hmacctx,(uint8_t *)M->val,(const uint64_t)M->len);
        sha256hmac_final(&hmacctx,(uint8_t *)T->val,hlen);
        T->len=hlen;
    }
    if (htype==TLS_SHA384_T) {

        sha384hmac_ctx_t hmacctx;
        sha384hmac_reset(&hmacctx,(uint8_t *)K->val,hlen);
        sha384hmac_update(&hmacctx,(uint8_t *)M->val,(const uint64_t)M->len);
        sha384hmac_final(&hmacctx,(uint8_t *)T->val,hlen);

        T->len=hlen;
    }
    if (htype==TLS_SHA512_T) {
        sha512hmac_ctx_t hmacctx;
        sha512hmac_reset(&hmacctx,(uint8_t *)K->val,hlen);
        sha512hmac_update(&hmacctx,(uint8_t *)M->val,(const uint64_t)M->len);
        sha512hmac_final(&hmacctx,(uint8_t *)T->val,hlen);
        T->len=hlen;
    }
}

// HASH of NULL
void SAL_hashNull(int htype,octad *H)
{
    int hlen=SAL_hashLen(htype);
    if (htype==TLS_SHA256_T) {
        sha256_ctx_t h;
        sha256_reset(&h);
        sha256_final(&h,(uint8_t *)H->val,hlen);
    }
    if (htype==TLS_SHA384_T) {
        sha384_ctx_t h;
        sha384_reset(&h);
        sha384_final(&h,(uint8_t *)H->val,hlen);
    }
    if (htype==TLS_SHA512_T) {
        sha512_ctx_t h;
        sha512_reset(&h);
        sha512_final(&h,(uint8_t *)H->val,hlen);
    }
    H->len=hlen;
}

// Unified hashing. Hash type type indicate by htype.
void SAL_hashInit(int htype,unihash *h)
{
    if (htype==TLS_SHA256_T) 
        sha256_reset((sha256_ctx_t *)&(h->state));
    if (htype==TLS_SHA384_T)
        sha384_reset((sha384_ctx_t *)&(h->state));
    if (htype==TLS_SHA512_T)
        sha512_reset((sha512_ctx_t *)&(h->state));
    h->htype=htype;
}

// Process a byte array
void SAL_hashProcessArray(unihash *h,char *b,int len)
{
    if (h->htype==TLS_SHA256_T)
        sha256_update((sha256_ctx_t *)&(h->state),(uint8_t *)b,len);
    if (h->htype==TLS_SHA384_T)
        sha384_update((sha384_ctx_t *)&(h->state),(uint8_t *)b,len);
    if (h->htype==TLS_SHA512_T)
        sha512_update((sha512_ctx_t *)&(h->state),(uint8_t *)b,len);
}

// output digest, return length
int SAL_hashOutput(unihash *h,char *d)
{
    unihash f=*h;  // make copy of state
    int hlen=SAL_hashLen(h->htype);
    if (h->htype==TLS_SHA256_T)
        sha256_final((sha256_ctx_t *)&(f.state),(uint8_t *)d,hlen);
    if (h->htype==TLS_SHA384_T)
        sha384_final((sha384_ctx_t *)&(f.state),(uint8_t *)d,hlen);
    if (h->htype==TLS_SHA512_T)
        sha512_final((sha512_ctx_t *)&(f.state),(uint8_t *)d,hlen);
    return hlen;
}

void SAL_aeadEncrypt(crypto *send,int hdrlen,char *hdr,int ptlen,char *pt,octad *TAG)
{ // AEAD encryption
    if (send->suite==TLS_CHACHA20_POLY1305_SHA256)
    { 
        uint8_t iv[8];
        uint8_t constant[4];
        for (int i=0;i<4;i++)
            constant[i]=send->IV.val[i];
        for (int i=0;i<8;i++)
            iv[i]=send->IV.val[4+i];
        chacha20_poly1305_aead_encrypt((uint8_t *)send->K.val,iv,constant,(uint8_t *)pt,(uint64_t)ptlen,(uint8_t *)hdr,(uint64_t)hdrlen,(uint8_t *)pt,(uint8_t *)TAG->val);
    } 
    if (send->suite==TLS_AES_128_GCM_SHA256)
    {
        aes128_gcm_encrypt((uint8_t *)send->K.val,(uint8_t *)send->IV.val,12,(uint8_t *)pt,(uint64_t)ptlen,(uint8_t *)hdr,(uint64_t)hdrlen,(uint8_t *)pt,(uint8_t *)TAG->val);
    }
    if (send->suite==TLS_AES_256_GCM_SHA384)
    {
        aes256_gcm_encrypt((uint8_t *)send->K.val,(uint8_t *)send->IV.val,12,(uint8_t *)pt,(uint64_t)ptlen,(uint8_t *)hdr,(uint64_t)hdrlen,(uint8_t *)pt,(uint8_t *)TAG->val);
    }
    TAG->len=16;
}

bool SAL_aeadDecrypt(crypto *recv,int hdrlen,char *hdr,int ctlen,char *ct,octad *TAG)
{ // AEAD decryption
    if (recv->suite==TLS_CHACHA20_POLY1305_SHA256)
    {
        uint8_t iv[8];
        uint8_t constant[4];
        for (int i=0;i<4;i++)
            constant[i]=recv->IV.val[i];
        for (int i=0;i<8;i++)
            iv[i]=recv->IV.val[4+i];

        if (chacha20_poly1305_aead_decrypt((uint8_t *)recv->K.val,iv,constant,(uint8_t *)ct,(uint64_t)ctlen,(uint8_t *)hdr,(uint64_t)hdrlen,(uint8_t *)ct,(uint8_t *)TAG->val)<0)
		return false;
    }
    if (recv->suite==TLS_AES_128_GCM_SHA256)
    {
        if (aes128_gcm_decrypt((uint8_t *)recv->K.val,(uint8_t *)recv->IV.val,12,(uint8_t *)ct,(uint64_t)ctlen,(uint8_t *)hdr,(uint64_t)hdrlen,(uint8_t *)ct,(uint8_t *)TAG->val)<0)
	    return false;
    }
    if (recv->suite==TLS_AES_256_GCM_SHA384)
    {
        if (aes256_gcm_decrypt((uint8_t *)recv->K.val,(uint8_t *)recv->IV.val,12,(uint8_t *)ct,(uint64_t)ctlen,(uint8_t *)hdr,(uint64_t)hdrlen,(uint8_t *)ct,(uint8_t *)TAG->val)<0)
	    return false;
    }
    return true;
}

// generate a public/private key pair in an approved group for a key exchange
void SAL_generateKeyPair(int group,octad *SK,octad *PK)
{
    ec_private_key_t private_key;
    ec_public_key_t public_key;
    if (group==X25519)
    {
        ec_private_key_init_for_curve_id(&private_key,E_CURVE_ID_X25519);
        ec_public_key_init_for_curve_id(&public_key,E_CURVE_ID_X25519);

        SAL_randomOctad(GFP_X25519_BYTELEN,SK);  // Random secret key

        SK->val[31]&=248;  
        SK->val[0]&=127;
        SK->val[0]|=64;

        OCT_reverse(SK);
        ec_x25519_import_private_key((uint8_t *)SK->val,&private_key);
        OCT_reverse(SK);
        ec_public_key_gen_for_curve_id(&public_key, &private_key, E_CURVE_ID_X25519);
        ec_x25519_export_public_key(&public_key,(uint8_t *)PK->val);

        OCT_reverse(PK);

//        printf("Private key= ");
//        for (int i=0;i<GFP_X25519_BYTELEN;i++)
//            printf("%02x",(uint8_t)SK->val[i]);
//        printf("\n");

//        printf("Public key= ");
//        for (int i=0;i<GFP_X25519_BYTELEN;i++)
//            printf("%02x",(uint8_t)PK->val[i]);
//        printf("\n");

        PK->len=GFP_X25519_BYTELEN;

//        printf("PK->len= %d\n",PK->len);
//        printf("SK->len= %d\n",SK->len);

    }    

    if (group==SECP256R1)
    {
        ec_private_key_init_for_curve_id(&private_key,E_CURVE_ID_NIST_P256);
        ec_public_key_init_for_curve_id(&public_key,E_CURVE_ID_NIST_P256);

        SAL_randomOctad(GFP_NIST_P256_BYTELEN,SK);
        ec_nist_p256_import_private_key((uint8_t *)SK->val,&private_key);

        ec_public_key_gen_for_curve_id(&public_key, &private_key, E_CURVE_ID_NIST_P256);
        PK->val[0]=0x04;
        ec_nist_p256_export_public_key(&public_key,(uint8_t *)&PK->val[1]);

        PK->len=2*GFP_NIST_P256_BYTELEN+1;
    }

    if (group==SECP384R1)
    {
        ec_private_key_init_for_curve_id(&private_key,E_CURVE_ID_NIST_P384);
        ec_public_key_init_for_curve_id(&public_key,E_CURVE_ID_NIST_P384);

        SAL_randomOctad(GFP_NIST_P384_BYTELEN,SK);
        ec_nist_p384_import_private_key((uint8_t *)SK->val,&private_key);

        ec_public_key_gen_for_curve_id(&public_key, &private_key, E_CURVE_ID_NIST_P384);
        PK->val[0]=0x04;
        ec_nist_p384_export_public_key(&public_key,(uint8_t *)&PK->val[1]);

        PK->len=2*GFP_NIST_P384_BYTELEN+1;
    }
    if (group==KYBER768)
    {
        byte r64[64];
        for (int i=0;i<64;i++)
            r64[i]=SAL_randomByte();
        octet MC_SK=octad_to_octet(SK);
        octet MC_PK=octad_to_octet(PK);
        KYBER_CCA_keypair(r64,&MC_SK,&MC_PK);
        SK->len=MC_SK.len;
        PK->len=MC_PK.len;
    }
}

// generate shared secret SS from secret key SK and public key PK
void SAL_generateSharedSecret(int group,octad *SK,octad *PK,octad *SS)
{
    ec_private_key_t private_key;
    ec_public_key_t public_key;
    if (group==X25519) {    
        ec_private_key_init_for_curve_id(&private_key,E_CURVE_ID_X25519);
        ec_public_key_init_for_curve_id(&public_key,E_CURVE_ID_X25519);
        
        OCT_reverse(SK);
        ec_x25519_import_private_key((uint8_t *)SK->val,&private_key);
        OCT_reverse(SK);
        ec_x25519_import_public_key((uint8_t *)PK->val,&public_key);

        ecdh_key_agreement_for_curve_id((uint8_t *)SS->val, GFP_X25519_BYTELEN, &private_key, &public_key, E_CURVE_ID_X25519); 
        SS->len=GFP_X25519_BYTELEN;
        OCT_reverse(SS);

        //printf("Private key= ");
        //for (int i=0;i<GFP_X25519_BYTELEN;i++)
        //    printf("%02x",(uint8_t)SK->val[i]);
        //printf("\n");

        //printf("Public key= ");
        //for (int i=0;i<GFP_X25519_BYTELEN;i++)
        //    printf("%02x",(uint8_t)PK->val[i]);
        //printf("\n");

        //printf("Shared key= ");
        //for (int i=0;i<GFP_X25519_BYTELEN;i++)
        //    printf("%02x",(uint8_t)SS->val[i]);
        //printf("\n");
    }

    if (group==SECP256R1) {
        ec_private_key_init_for_curve_id(&private_key,E_CURVE_ID_NIST_P256);
        ec_public_key_init_for_curve_id(&public_key,E_CURVE_ID_NIST_P256);
  
        ec_nist_p256_import_private_key((uint8_t *)SK->val,&private_key);
        ec_nist_p256_import_public_key((uint8_t *)&PK->val[1],&public_key);
        ecdh_key_agreement_for_curve_id((uint8_t *)SS->val, GFP_NIST_P256_BYTELEN, &private_key, &public_key, E_CURVE_ID_NIST_P256);  
        SS->len=GFP_NIST_P256_BYTELEN;
    }

    if (group==SECP384R1) {
        ec_private_key_init_for_curve_id(&private_key,E_CURVE_ID_NIST_P384);
        ec_public_key_init_for_curve_id(&public_key,E_CURVE_ID_NIST_P384);
  
        ec_nist_p384_import_private_key((uint8_t *)SK->val,&private_key);
        ec_nist_p384_import_public_key((uint8_t *)&PK->val[1],&public_key);
        ecdh_key_agreement_for_curve_id((uint8_t *)SS->val, GFP_NIST_P384_BYTELEN, &private_key, &public_key, E_CURVE_ID_NIST_P384);  
        SS->len=GFP_NIST_P384_BYTELEN;
    }
    if (group==KYBER768) {
        octet MC_SK=octad_to_octet(SK);
        octet MC_PK=octad_to_octet(PK);
        octet MC_SS=octad_to_octet(SS);
        KYBER_CCA_decrypt(&MC_SK,&MC_PK,(byte *)MC_SS.val);
        SK->len=MC_SK.len;
        PK->len=MC_PK.len;
        SS->len=32;
    }
}

static bool DILITHIUM3_VERIFY(octad *CERT,octad *SIG,octad *PUBKEY)
{
    octet MC_CERT=octad_to_octet(CERT);
    octet MC_SIG=octad_to_octet(SIG);
    octet MC_PUBKEY=octad_to_octet(PUBKEY);
    return DLTHM_verify(&MC_PUBKEY,&MC_CERT,&MC_SIG);    
}

static void DILITHIUM3_SIGN(octad *KEY,octad *MESS,octad *SIG)
{
    octet MC_MESS=octad_to_octet(MESS);
    octet MC_KEY=octad_to_octet(KEY);
    octet MC_SIG=octad_to_octet(SIG);

    DLTHM_signature(&MC_KEY,&MC_MESS,&MC_SIG); 
    SIG->len=MC_SIG.len;
}

// RSA 2048-bit PKCS1.5 signature verification
static bool RSA_2048_PKCS15_VERIFY(int sha,octad *CERT,octad *SIG,octad *PUBKEY)
{
    bool res;
    char p1[RFS_RSA2048];
    octet P1={0,sizeof(p1),p1};
    char p2[RFS_RSA2048];
    octet P2={0,sizeof(p2),p2};

    octet MC_CERT=octad_to_octet(CERT);
    octet MC_SIG=octad_to_octet(SIG);
    octet MC_PUBKEY=octad_to_octet(PUBKEY);

    RSA2048::rsa_public_key PK;
    PK.e = 65537; // assuming this!
    RSA2048::RSA_fromOctet(PK.n, &MC_PUBKEY);
    RSA2048::RSA_ENCRYPT(&PK, &MC_SIG, &P2);
    PKCS15(sha, &MC_CERT, &P1);
    res=OCT_comp(&P1, &P2);
    if (!res)
    { // check alternate PKCS1.5 encoding
        PKCS15b(sha, &MC_CERT, &P1);
        res=OCT_comp(&P1, &P2);
    }
    return res;
}

// RSA 4096-bit PKCS1.5 signature verification
static bool RSA_4096_PKCS15_VERIFY(int sha,octad *CERT,octad *SIG,octad *PUBKEY)
{
    bool res;
    char p1[RFS_RSA4096];
    octet P1={0,sizeof(p1),p1};
    char p2[RFS_RSA4096];
    octet P2={0,sizeof(p2),p2};

    octet MC_CERT=octad_to_octet(CERT);
    octet MC_SIG=octad_to_octet(SIG);
    octet MC_PUBKEY=octad_to_octet(PUBKEY);

    RSA4096::rsa_public_key PK;
    PK.e = 65537; // assuming this!
    RSA4096::RSA_fromOctet(PK.n, &MC_PUBKEY);
    RSA4096::RSA_ENCRYPT(&PK, &MC_SIG, &P2);
    PKCS15(sha, &MC_CERT, &P1);
    res=OCT_comp(&P1, &P2);
    if (!res)
    { // check alternate PKCS1.5 encoding
        PKCS15b(sha, &MC_CERT, &P1);
        res=OCT_comp(&P1, &P2);
    }
    return res;
}

static bool RSA_PKCS15_VERIFY(int sha,octad *CERT,octad *SIG,octad *PUBKEY)
{
    if (PUBKEY->len==RFS_RSA2048)
        return RSA_2048_PKCS15_VERIFY(sha,CERT,SIG,PUBKEY);
    if (PUBKEY->len==RFS_RSA4096)
        return RSA_4096_PKCS15_VERIFY(sha,CERT,SIG,PUBKEY);
    return false;
}

// RSA 2048-bit PSS-RSAE signature verification
static bool RSA_2048_PSS_RSAE_VERIFY(int sha,octad *MESS,octad *SIG,octad *PUBKEY)
{
    char p[RFS_RSA2048];
    octet P={0,sizeof(p),p};

    octet MC_MESS=octad_to_octet(MESS);
    octet MC_SIG=octad_to_octet(SIG);
    octet MC_PUBKEY=octad_to_octet(PUBKEY);

    RSA2048::rsa_public_key PK;
    PK.e = 65537;
    RSA2048::RSA_fromOctet(PK.n, &MC_PUBKEY);
    RSA2048::RSA_ENCRYPT(&PK, &MC_SIG, &P);
    if (PSS_VERIFY(sha,&MC_MESS,&P)) 
        return true;
    return false;
}

// RSA 4096-bit PSS-RSAE signature verification
static bool RSA_4096_PSS_RSAE_VERIFY(int sha,octad *MESS,octad *SIG,octad *PUBKEY)
{
    char p[RFS_RSA4096];
    octet P={0,sizeof(p),p};

    octet MC_MESS=octad_to_octet(MESS);
    octet MC_SIG=octad_to_octet(SIG);
    octet MC_PUBKEY=octad_to_octet(PUBKEY);

    RSA4096::rsa_public_key PK;
    PK.e = 65537;
    RSA4096::RSA_fromOctet(PK.n, &MC_PUBKEY);
    RSA4096::RSA_ENCRYPT(&PK, &MC_SIG, &P);
    if (PSS_VERIFY(sha,&MC_MESS,&P)) 
        return true;
    return false;
}

static bool RSA_PSS_RSAE_VERIFY(int sha,octad *MESS,octad *SIG,octad *PUBKEY)
{
    if (PUBKEY->len==RFS_RSA2048)
        return RSA_2048_PSS_RSAE_VERIFY(sha,MESS,SIG,PUBKEY);
    if (PUBKEY->len==RFS_RSA4096)
        return RSA_4096_PSS_RSAE_VERIFY(sha,MESS,SIG,PUBKEY);
    return false;
}

// Curve SECP256R1 elliptic curve ECDSA verification
static bool SECP256R1_ECDSA_VERIFY(int sha,octad *CERT,octad *SIG,octad *PUBKEY)
{
    int res;

    octet MC_CERT=octad_to_octet(CERT);
    octet MC_SIG=octad_to_octet(SIG);
    octet MC_PUBKEY=octad_to_octet(PUBKEY);

    res=NIST256::ECP_PUBLIC_KEY_VALIDATE(&MC_PUBKEY);
    if (res!=0) return false;

    char r[32];
    octet R={0,sizeof(r),r};
    char s[32];
    octet S={0,sizeof(s),s};
    int siglen=SIG->len/2;
    for (int i=0;i<siglen;i++)
    {
        OCT_jbyte(&R,MC_SIG.val[i],1);
        OCT_jbyte(&S,MC_SIG.val[i+siglen],1);
    }    

    res=NIST256::ECP_VP_DSA(sha, &MC_PUBKEY, &MC_CERT, &R, &S);
    if (res!=0) return false;

    return true;
}

// Curve SECP384R1 elliptic curve ECDSA verification
static bool SECP384R1_ECDSA_VERIFY(int sha,octad *CERT,octad *SIG,octad *PUBKEY)
{
    int res;

    octet MC_CERT=octad_to_octet(CERT);
    octet MC_SIG=octad_to_octet(SIG);
    octet MC_PUBKEY=octad_to_octet(PUBKEY);

    res=NIST384::ECP_PUBLIC_KEY_VALIDATE(&MC_PUBKEY);
    if (res!=0) return false;

    char r[48];
    octet R={0,sizeof(r),r};
    char s[48];
    octet S={0,sizeof(s),s};
    int siglen=SIG->len/2;
    for (int i=0;i<siglen;i++)
    {
        OCT_jbyte(&R,MC_SIG.val[i],1);
        OCT_jbyte(&S,MC_SIG.val[i+siglen],1);
    }    

    res=NIST384::ECP_VP_DSA(sha, &MC_PUBKEY, &MC_CERT, &R, &S);
    if (res!=0) return false;

    return true;
}

static bool Ed25519_VERIFY(octad *CERT,octad *SIG,octad *PUBKEY)
{ 
    eddsa_public_key_t pk;
    eddsa_signature_t sig;

    for (int i=0;i<ED25519_DSA_PUBLIC_KEY_SIZE_IN_BYTES;i++)
        pk[i]=PUBKEY->val[i];
    for (int i=0;i<ED25519_DSA_SIGNATURE_SIZE_IN_BYTES;i++)
        sig[i]=SIG->val[i];

    int result=eddsa_verify(&sig,&pk,(uint8_t *)CERT->val,CERT->len);

    if (result == 0) 
        return true;
    return false;
}

// Use Curve SECP256R1 ECDSA to digitally sign a message using a private key 
static void SECP256R1_ECDSA_SIGN(int sha,octad *KEY,octad *MESS,octad *SIG)
{
    octet MC_MESS=octad_to_octet(MESS);
    octet MC_KEY=octad_to_octet(KEY);
    octet MC_SIG=octad_to_octet(SIG);

    char r[32];
    octet R={0,sizeof(r),r};
    char s[32];
    octet S={0,sizeof(s),s};

    NIST256::ECP_SP_DSA(sha, &RNG, NULL, &MC_KEY, &MC_MESS, &R, &S);

    OCT_copy(&MC_SIG,&R);
    OCT_joctet(&MC_SIG,&S);

    SIG->len=MC_SIG.len;
}

// Use Curve SECP384R1 ECDSA to digitally sign a message using a private key 
static void SECP384R1_ECDSA_SIGN(int sha,octad *KEY,octad *MESS,octad *SIG)
{
    octet MC_MESS=octad_to_octet(MESS);
    octet MC_KEY=octad_to_octet(KEY);
    octet MC_SIG=octad_to_octet(SIG);

    char r[48];
    octet R={0,sizeof(r),r};
    char s[48];
    octet S={0,sizeof(s),s};

    NIST384::ECP_SP_DSA(sha, &RNG, NULL, &MC_KEY, &MC_MESS, &R, &S);

    OCT_copy(&MC_SIG,&R);
    OCT_joctet(&MC_SIG,&S);

    SIG->len=MC_SIG.len;
}

static void Ed25519_SIGN(octad *KEY,octad *MESS,octad *SIG)
{ 
    eddsa_private_key_t sk;
    eddsa_signature_t sig;

    for (int i=0;i<ED25519_DSA_PRIVATE_KEY_SIZE_IN_BYTES;i++)
        sk.private_key[i]=KEY->val[i];
    eddsa_public_key_gen(&(sk.public_key),&sk);   // ??

    eddsa_sign(&sig,&sk,(uint8_t *)MESS->val,MESS->len);

    SIG->len=ED25519_DSA_SIGNATURE_SIZE_IN_BYTES;
    for (int i=0;i<ED25519_DSA_SIGNATURE_SIZE_IN_BYTES;i++)
        SIG->val[i]=sig[i];   
}

// Use RSA-2048 PSS-RSAE to digitally sign a message using a private key
static void RSA_2048_PSS_RSAE_SIGN(int sha,octad *KEY,octad *MESS,octad *SIG)
{
    int len=KEY->len/5;   // length of p and q
    if (len!=128) return;
    char p[128];
    octet P={len,sizeof(p),p};
    char q[128];
    octet Q={len,sizeof(q),q};
    char dp[128];
    octet DP={len,sizeof(dp),dp};
    char dq[128];
    octet DQ={len,sizeof(dq),dq};
    char c[128];
    octet C={len,sizeof(c),c}; 
    for (int i=0;i<len;i++)
    {
        p[i]=KEY->val[i];
        q[i]=KEY->val[i+len];
        dp[i]=KEY->val[i+2*len];
        dq[i]=KEY->val[i+3*len];
        c[i]=KEY->val[i+4*len];
    }
    RSA2048::rsa_private_key SK;
    char enc[256];
    octet ENC={0,sizeof(enc),enc};
    RSA2048::RSA_PRIVATE_KEY_FROM_OPENSSL(&P,&Q,&DP,&DQ,&C,&SK);

    octet MC_MESS=octad_to_octet(MESS);
    octet MC_SIG=octad_to_octet(SIG);

    PSS_ENCODE(sha, &MC_MESS, &RNG, &ENC);
    RSA2048::RSA_DECRYPT(&SK,&ENC,&MC_SIG);
    SIG->len=MC_SIG.len;
}

// Use RSA-4096 PSS-RSAE to digitally sign a message using a private key
static void RSA_4096_PSS_RSAE_SIGN(int sha,octad *KEY,octad *MESS,octad *SIG)
{
    int len=KEY->len/5;   // length of p and q
    if (len!=256) return;
    char p[256];
    octet P={len,sizeof(p),p};
    char q[256];
    octet Q={len,sizeof(q),q};
    char dp[256];
    octet DP={len,sizeof(dp),dp};
    char dq[256];
    octet DQ={len,sizeof(dq),dq};
    char c[256];
    octet C={len,sizeof(c),c}; 
    for (int i=0;i<len;i++)
    {
        p[i]=KEY->val[i];
        q[i]=KEY->val[i+len];
        dp[i]=KEY->val[i+2*len];
        dq[i]=KEY->val[i+3*len];
        c[i]=KEY->val[i+4*len];
    }
    RSA4096::rsa_private_key SK;
    char enc[512];
    octet ENC={0,sizeof(enc),enc};

    octet MC_MESS=octad_to_octet(MESS);
    octet MC_SIG=octad_to_octet(SIG);

    RSA4096::RSA_PRIVATE_KEY_FROM_OPENSSL(&P,&Q,&DP,&DQ,&C,&SK);
    PSS_ENCODE(sha, &MC_MESS, &RNG, &ENC);
    RSA4096::RSA_DECRYPT(&SK,&ENC,&MC_SIG);
    SIG->len=MC_SIG.len;
}

static void RSA_PSS_RSAE_SIGN(int sha,octad *KEY,octad *MESS,octad *SIG)
{
    int len=KEY->len/5;
    if (len==128) RSA_2048_PSS_RSAE_SIGN(sha,KEY,MESS,SIG);
    if (len==256) RSA_4096_PSS_RSAE_SIGN(sha,KEY,MESS,SIG);
}

// RFC8446:     "A TLS-compliant application MUST support digital signatures with
//              rsa_pkcs1_sha256 (for certificates), rsa_pss_rsae_sha256 (for
//              CertificateVerify and certificates), and ecdsa_secp256r1_sha256."

// SAL signature verification
bool SAL_tlsSignatureVerify(int sigAlg,octad *BUFF,octad *SIG,octad *PUBKEY)
{
    switch (sigAlg) {
        case RSA_PKCS1_SHA256 :
            return RSA_PKCS15_VERIFY(32,BUFF,SIG,PUBKEY);
        case ECDSA_SECP256R1_SHA256 :
            return SECP256R1_ECDSA_VERIFY(32,BUFF,SIG,PUBKEY); 
        case RSA_PKCS1_SHA384 :
            return RSA_PKCS15_VERIFY(48,BUFF,SIG,PUBKEY); 
        case ECDSA_SECP384R1_SHA384 :
            return SECP384R1_ECDSA_VERIFY(48,BUFF,SIG,PUBKEY);
        case RSA_PKCS1_SHA512 :
            return RSA_PKCS15_VERIFY(64,BUFF,SIG,PUBKEY); 
        case RSA_PSS_RSAE_SHA256:
            return RSA_PSS_RSAE_VERIFY(32,BUFF,SIG,PUBKEY);
        caseED25519:
            return Ed25519_VERIFY(BUFF,SIG,PUBKEY);
        case DILITHIUM3:
            return DILITHIUM3_VERIFY(BUFF,SIG,PUBKEY);
        default:
            return false;
    }
}

// Form Transcript Signature 
void SAL_tlsSignature(int sigAlg,octad *KEY,octad *TRANS,octad *SIG)
{ // probably need to support more cases
    switch (sigAlg)
    {
    case RSA_PSS_RSAE_SHA256:
        RSA_PSS_RSAE_SIGN(32,KEY,TRANS,SIG);
        break;
    case ED25519:
        Ed25519_SIGN(KEY,TRANS,SIG) ;
        break;
    case ECDSA_SECP256R1_SHA256:
        SECP256R1_ECDSA_SIGN(32,KEY,TRANS,SIG);
        break;
    case ECDSA_SECP384R1_SHA384:
        SECP384R1_ECDSA_SIGN(48,KEY,TRANS,SIG);
        break;
    case DILITHIUM3:
        DILITHIUM3_SIGN(KEY,TRANS,SIG);
    }
}
